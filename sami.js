
(function(root) {

    var bhIndex = null;
    var rootPath = '';
    var treeHtml = '        <ul>                <li data-name="namespace:" class="opened">                    <div style="padding-left:0px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href=".html">[Global Namespace]</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:AdminLTE" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="AdminLTE.html">AdminLTE</a>                    </div>                </li>                            <li data-name="class:App" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="App.html">App</a>                    </div>                </li>                            <li data-name="class:Artisan" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Artisan.html">Artisan</a>                    </div>                </li>                            <li data-name="class:Auth" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Auth.html">Auth</a>                    </div>                </li>                            <li data-name="class:Blade" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Blade.html">Blade</a>                    </div>                </li>                            <li data-name="class:Bus" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Bus.html">Bus</a>                    </div>                </li>                            <li data-name="class:Cache" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Cache.html">Cache</a>                    </div>                </li>                            <li data-name="class:Config" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Config.html">Config</a>                    </div>                </li>                            <li data-name="class:Cookie" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Cookie.html">Cookie</a>                    </div>                </li>                            <li data-name="class:CreatePasswordResetsTable" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="CreatePasswordResetsTable.html">CreatePasswordResetsTable</a>                    </div>                </li>                            <li data-name="class:CreateTasksTable" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="CreateTasksTable.html">CreateTasksTable</a>                    </div>                </li>                            <li data-name="class:CreateUsersTable" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="CreateUsersTable.html">CreateUsersTable</a>                    </div>                </li>                            <li data-name="class:Crypt" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Crypt.html">Crypt</a>                    </div>                </li>                            <li data-name="class:DB" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="DB.html">DB</a>                    </div>                </li>                            <li data-name="class:DatabaseSeeder" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="DatabaseSeeder.html">DatabaseSeeder</a>                    </div>                </li>                            <li data-name="class:Debugbar" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Debugbar.html">Debugbar</a>                    </div>                </li>                            <li data-name="class:Eloquent" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Eloquent.html">Eloquent</a>                    </div>                </li>                            <li data-name="class:Event" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Event.html">Event</a>                    </div>                </li>                            <li data-name="class:File" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="File.html">File</a>                    </div>                </li>                            <li data-name="class:Gate" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Gate.html">Gate</a>                    </div>                </li>                            <li data-name="class:Hash" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Hash.html">Hash</a>                    </div>                </li>                            <li data-name="class:Lang" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Lang.html">Lang</a>                    </div>                </li>                            <li data-name="class:Log" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Log.html">Log</a>                    </div>                </li>                            <li data-name="class:Mail" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Mail.html">Mail</a>                    </div>                </li>                            <li data-name="class:Notification" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Notification.html">Notification</a>                    </div>                </li>                            <li data-name="class:Password" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Password.html">Password</a>                    </div>                </li>                            <li data-name="class:Queue" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Queue.html">Queue</a>                    </div>                </li>                            <li data-name="class:Redirect" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Redirect.html">Redirect</a>                    </div>                </li>                            <li data-name="class:Request" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Request.html">Request</a>                    </div>                </li>                            <li data-name="class:Response" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Response.html">Response</a>                    </div>                </li>                            <li data-name="class:Route" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Route.html">Route</a>                    </div>                </li>                            <li data-name="class:Schema" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Schema.html">Schema</a>                    </div>                </li>                            <li data-name="class:Session" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Session.html">Session</a>                    </div>                </li>                            <li data-name="class:Storage" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Storage.html">Storage</a>                    </div>                </li>                            <li data-name="class:TasksTablesSeeder" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="TasksTablesSeeder.html">TasksTablesSeeder</a>                    </div>                </li>                            <li data-name="class:URL" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="URL.html">URL</a>                    </div>                </li>                            <li data-name="class:UsersTablesSeeder" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="UsersTablesSeeder.html">UsersTablesSeeder</a>                    </div>                </li>                            <li data-name="class:Validator" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Validator.html">Validator</a>                    </div>                </li>                            <li data-name="class:View" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="View.html">View</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:App" class="opened">                    <div style="padding-left:0px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="App.html">App</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:App_Console" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="App/Console.html">Console</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:App_Console_Kernel" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="App/Console/Kernel.html">Kernel</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:App_Exceptions" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="App/Exceptions.html">Exceptions</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:App_Exceptions_Handler" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="App/Exceptions/Handler.html">Handler</a>                    </div>                </li>                            <li data-name="class:App_Exceptions_IncorrectModelException" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="App/Exceptions/IncorrectModelException.html">IncorrectModelException</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:App_Http" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="App/Http.html">Http</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:App_Http_Controllers" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="App/Http/Controllers.html">Controllers</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:App_Http_Controllers_Auth" >                    <div style="padding-left:54px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="App/Http/Controllers/Auth.html">Auth</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:App_Http_Controllers_Auth_ForgotPasswordController" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="App/Http/Controllers/Auth/ForgotPasswordController.html">ForgotPasswordController</a>                    </div>                </li>                            <li data-name="class:App_Http_Controllers_Auth_LoginController" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="App/Http/Controllers/Auth/LoginController.html">LoginController</a>                    </div>                </li>                            <li data-name="class:App_Http_Controllers_Auth_RegisterController" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="App/Http/Controllers/Auth/RegisterController.html">RegisterController</a>                    </div>                </li>                            <li data-name="class:App_Http_Controllers_Auth_ResetPasswordController" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="App/Http/Controllers/Auth/ResetPasswordController.html">ResetPasswordController</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:App_Http_Controllers_Controller" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="App/Http/Controllers/Controller.html">Controller</a>                    </div>                </li>                            <li data-name="class:App_Http_Controllers_HomeController" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="App/Http/Controllers/HomeController.html">HomeController</a>                    </div>                </li>                            <li data-name="class:App_Http_Controllers_TasksController" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="App/Http/Controllers/TasksController.html">TasksController</a>                    </div>                </li>                            <li data-name="class:App_Http_Controllers_UserTaskController" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="App/Http/Controllers/UserTaskController.html">UserTaskController</a>                    </div>                </li>                            <li data-name="class:App_Http_Controllers_UsersController" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="App/Http/Controllers/UsersController.html">UsersController</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:App_Http_Middleware" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="App/Http/Middleware.html">Middleware</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:App_Http_Middleware_EncryptCookies" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="App/Http/Middleware/EncryptCookies.html">EncryptCookies</a>                    </div>                </li>                            <li data-name="class:App_Http_Middleware_RedirectIfAuthenticated" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="App/Http/Middleware/RedirectIfAuthenticated.html">RedirectIfAuthenticated</a>                    </div>                </li>                            <li data-name="class:App_Http_Middleware_VerifyCsrfToken" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="App/Http/Middleware/VerifyCsrfToken.html">VerifyCsrfToken</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:App_Http_Kernel" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="App/Http/Kernel.html">Kernel</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:App_Providers" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="App/Providers.html">Providers</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:App_Providers_AppServiceProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="App/Providers/AppServiceProvider.html">AppServiceProvider</a>                    </div>                </li>                            <li data-name="class:App_Providers_AuthServiceProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="App/Providers/AuthServiceProvider.html">AuthServiceProvider</a>                    </div>                </li>                            <li data-name="class:App_Providers_BroadcastServiceProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="App/Providers/BroadcastServiceProvider.html">BroadcastServiceProvider</a>                    </div>                </li>                            <li data-name="class:App_Providers_EventServiceProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="App/Providers/EventServiceProvider.html">EventServiceProvider</a>                    </div>                </li>                            <li data-name="class:App_Providers_RouteServiceProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="App/Providers/RouteServiceProvider.html">RouteServiceProvider</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:App_Repositories" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="App/Repositories.html">Repositories</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:App_Repositories_Contracts" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="App/Repositories/Contracts.html">Contracts</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:App_Repositories_Contracts_Repository" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="App/Repositories/Contracts/Repository.html">Repository</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:App_Repositories_TaskRepository" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="App/Repositories/TaskRepository.html">TaskRepository</a>                    </div>                </li>                            <li data-name="class:App_Repositories_UserRepository" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="App/Repositories/UserRepository.html">UserRepository</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:App_Transformers" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="App/Transformers.html">Transformers</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:App_Transformers_Contracts" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="App/Transformers/Contracts.html">Contracts</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:App_Transformers_Contracts_Transformer" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="App/Transformers/Contracts/Transformer.html">Transformer</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:App_Transformers_TaskTransformer" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="App/Transformers/TaskTransformer.html">TaskTransformer</a>                    </div>                </li>                            <li data-name="class:App_Transformers_Transformer" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="App/Transformers/Transformer.html">Transformer</a>                    </div>                </li>                            <li data-name="class:App_Transformers_UserTransformer" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="App/Transformers/UserTransformer.html">UserTransformer</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:App_Task" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="App/Task.html">Task</a>                    </div>                </li>                            <li data-name="class:App_User" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="App/User.html">User</a>                    </div>                </li>                </ul></div>                </li>                </ul>';

    var searchTypeClasses = {
        'Namespace': 'label-default',
        'Class': 'label-info',
        'Interface': 'label-primary',
        'Trait': 'label-success',
        'Method': 'label-danger',
        '_': 'label-warning'
    };

    var searchIndex = [
                    
            {"type": "Namespace", "link": ".html", "name": "", "doc": "Namespace "},{"type": "Namespace", "link": "App.html", "name": "App", "doc": "Namespace App"},{"type": "Namespace", "link": "App/Console.html", "name": "App\\Console", "doc": "Namespace App\\Console"},{"type": "Namespace", "link": "App/Exceptions.html", "name": "App\\Exceptions", "doc": "Namespace App\\Exceptions"},{"type": "Namespace", "link": "App/Http.html", "name": "App\\Http", "doc": "Namespace App\\Http"},{"type": "Namespace", "link": "App/Http/Controllers.html", "name": "App\\Http\\Controllers", "doc": "Namespace App\\Http\\Controllers"},{"type": "Namespace", "link": "App/Http/Controllers/Auth.html", "name": "App\\Http\\Controllers\\Auth", "doc": "Namespace App\\Http\\Controllers\\Auth"},{"type": "Namespace", "link": "App/Http/Middleware.html", "name": "App\\Http\\Middleware", "doc": "Namespace App\\Http\\Middleware"},{"type": "Namespace", "link": "App/Providers.html", "name": "App\\Providers", "doc": "Namespace App\\Providers"},{"type": "Namespace", "link": "App/Repositories.html", "name": "App\\Repositories", "doc": "Namespace App\\Repositories"},{"type": "Namespace", "link": "App/Repositories/Contracts.html", "name": "App\\Repositories\\Contracts", "doc": "Namespace App\\Repositories\\Contracts"},{"type": "Namespace", "link": "App/Transformers.html", "name": "App\\Transformers", "doc": "Namespace App\\Transformers"},{"type": "Namespace", "link": "App/Transformers/Contracts.html", "name": "App\\Transformers\\Contracts", "doc": "Namespace App\\Transformers\\Contracts"},
            {"type": "Interface", "fromName": "App\\Repositories\\Contracts", "fromLink": "App/Repositories/Contracts.html", "link": "App/Repositories/Contracts/Repository.html", "name": "App\\Repositories\\Contracts\\Repository", "doc": "&quot;Interface Repository&quot;"},
                                                        {"type": "Method", "fromName": "App\\Repositories\\Contracts\\Repository", "fromLink": "App/Repositories/Contracts/Repository.html", "link": "App/Repositories/Contracts/Repository.html#method_find", "name": "App\\Repositories\\Contracts\\Repository::find", "doc": "&quot;&quot;"},
            
            {"type": "Interface", "fromName": "App\\Transformers\\Contracts", "fromLink": "App/Transformers/Contracts.html", "link": "App/Transformers/Contracts/Transformer.html", "name": "App\\Transformers\\Contracts\\Transformer", "doc": "&quot;Interface Transformer&quot;"},
                                                        {"type": "Method", "fromName": "App\\Transformers\\Contracts\\Transformer", "fromLink": "App/Transformers/Contracts/Transformer.html", "link": "App/Transformers/Contracts/Transformer.html#method_transform", "name": "App\\Transformers\\Contracts\\Transformer::transform", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "App\\Transformers\\Contracts\\Transformer", "fromLink": "App/Transformers/Contracts/Transformer.html", "link": "App/Transformers/Contracts/Transformer.html#method_transformCollections", "name": "App\\Transformers\\Contracts\\Transformer::transformCollections", "doc": "&quot;&quot;"},
            
            
            {"type": "Class",  "link": "AdminLTE.html", "name": "AdminLTE", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "AdminLTE", "fromLink": "AdminLTE.html", "link": "AdminLTE.html#method_homeController", "name": "AdminLTE::homeController", "doc": "&quot;Home controller copy path.&quot;"},
                    {"type": "Method", "fromName": "AdminLTE", "fromLink": "AdminLTE.html", "link": "AdminLTE.html#method_registerController", "name": "AdminLTE::registerController", "doc": "&quot;Auth register controller copy path.&quot;"},
                    {"type": "Method", "fromName": "AdminLTE", "fromLink": "AdminLTE.html", "link": "AdminLTE.html#method_loginController", "name": "AdminLTE::loginController", "doc": "&quot;Auth login controller copy path.&quot;"},
                    {"type": "Method", "fromName": "AdminLTE", "fromLink": "AdminLTE.html", "link": "AdminLTE.html#method_forgotPasswordController", "name": "AdminLTE::forgotPasswordController", "doc": "&quot;Auth forgot password controller copy path.&quot;"},
                    {"type": "Method", "fromName": "AdminLTE", "fromLink": "AdminLTE.html", "link": "AdminLTE.html#method_resetPasswordController", "name": "AdminLTE::resetPasswordController", "doc": "&quot;Auth reset password controller copy path.&quot;"},
                    {"type": "Method", "fromName": "AdminLTE", "fromLink": "AdminLTE.html", "link": "AdminLTE.html#method_publicAssets", "name": "AdminLTE::publicAssets", "doc": "&quot;Public assets copy path.&quot;"},
                    {"type": "Method", "fromName": "AdminLTE", "fromLink": "AdminLTE.html", "link": "AdminLTE.html#method_viewsToOverwrite", "name": "AdminLTE::viewsToOverwrite", "doc": "&quot;Only views to overwrite.&quot;"},
                    {"type": "Method", "fromName": "AdminLTE", "fromLink": "AdminLTE.html", "link": "AdminLTE.html#method_views", "name": "AdminLTE::views", "doc": "&quot;Views copy path.&quot;"},
                    {"type": "Method", "fromName": "AdminLTE", "fromLink": "AdminLTE.html", "link": "AdminLTE.html#method_tests", "name": "AdminLTE::tests", "doc": "&quot;Tests copy path.&quot;"},
                    {"type": "Method", "fromName": "AdminLTE", "fromLink": "AdminLTE.html", "link": "AdminLTE.html#method_resourceAssets", "name": "AdminLTE::resourceAssets", "doc": "&quot;Resource assets copy path.&quot;"},
                    {"type": "Method", "fromName": "AdminLTE", "fromLink": "AdminLTE.html", "link": "AdminLTE.html#method_languages", "name": "AdminLTE::languages", "doc": "&quot;Languages assets copy path.&quot;"},
                    {"type": "Method", "fromName": "AdminLTE", "fromLink": "AdminLTE.html", "link": "AdminLTE.html#method_gravatar", "name": "AdminLTE::gravatar", "doc": "&quot;Gravatar path.&quot;"},
            
            {"type": "Class",  "link": "App.html", "name": "App", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_version", "name": "App::version", "doc": "&quot;Get the version number of the application.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_bootstrapWith", "name": "App::bootstrapWith", "doc": "&quot;Run the given array of bootstrap classes.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_afterLoadingEnvironment", "name": "App::afterLoadingEnvironment", "doc": "&quot;Register a callback to run after loading the environment.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_beforeBootstrapping", "name": "App::beforeBootstrapping", "doc": "&quot;Register a callback to run before a bootstrapper.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_afterBootstrapping", "name": "App::afterBootstrapping", "doc": "&quot;Register a callback to run after a bootstrapper.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_hasBeenBootstrapped", "name": "App::hasBeenBootstrapped", "doc": "&quot;Determine if the application has been bootstrapped before.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_setBasePath", "name": "App::setBasePath", "doc": "&quot;Set the base path for the application.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_path", "name": "App::path", "doc": "&quot;Get the path to the application \&quot;app\&quot; directory.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_basePath", "name": "App::basePath", "doc": "&quot;Get the base path of the Laravel installation.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_bootstrapPath", "name": "App::bootstrapPath", "doc": "&quot;Get the path to the bootstrap directory.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_configPath", "name": "App::configPath", "doc": "&quot;Get the path to the application configuration files.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_databasePath", "name": "App::databasePath", "doc": "&quot;Get the path to the database directory.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_useDatabasePath", "name": "App::useDatabasePath", "doc": "&quot;Set the database directory.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_langPath", "name": "App::langPath", "doc": "&quot;Get the path to the language files.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_publicPath", "name": "App::publicPath", "doc": "&quot;Get the path to the public \/ web directory.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_storagePath", "name": "App::storagePath", "doc": "&quot;Get the path to the storage directory.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_useStoragePath", "name": "App::useStoragePath", "doc": "&quot;Set the storage directory.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_resourcePath", "name": "App::resourcePath", "doc": "&quot;Get the path to the resources directory.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_environmentPath", "name": "App::environmentPath", "doc": "&quot;Get the path to the environment file directory.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_useEnvironmentPath", "name": "App::useEnvironmentPath", "doc": "&quot;Set the directory for the environment file.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_loadEnvironmentFrom", "name": "App::loadEnvironmentFrom", "doc": "&quot;Set the environment file to be loaded during bootstrapping.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_environmentFile", "name": "App::environmentFile", "doc": "&quot;Get the environment file the application is using.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_environmentFilePath", "name": "App::environmentFilePath", "doc": "&quot;Get the fully qualified path to the environment file.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_environment", "name": "App::environment", "doc": "&quot;Get or check the current application environment.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_isLocal", "name": "App::isLocal", "doc": "&quot;Determine if application is in local environment.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_detectEnvironment", "name": "App::detectEnvironment", "doc": "&quot;Detect the application&#039;s current environment.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_runningInConsole", "name": "App::runningInConsole", "doc": "&quot;Determine if we are running in the console.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_runningUnitTests", "name": "App::runningUnitTests", "doc": "&quot;Determine if we are running unit tests.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_registerConfiguredProviders", "name": "App::registerConfiguredProviders", "doc": "&quot;Register all of the configured providers.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_register", "name": "App::register", "doc": "&quot;Register a service provider with the application.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_getProvider", "name": "App::getProvider", "doc": "&quot;Get the registered service provider instance if it exists.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_resolveProviderClass", "name": "App::resolveProviderClass", "doc": "&quot;Resolve a service provider instance from the class name.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_loadDeferredProviders", "name": "App::loadDeferredProviders", "doc": "&quot;Load and boot all of the remaining deferred providers.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_loadDeferredProvider", "name": "App::loadDeferredProvider", "doc": "&quot;Load the provider for a deferred service.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_registerDeferredProvider", "name": "App::registerDeferredProvider", "doc": "&quot;Register a deferred provider and service.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_make", "name": "App::make", "doc": "&quot;Resolve the given type from the container.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_bound", "name": "App::bound", "doc": "&quot;Determine if the given abstract type has been bound.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_isBooted", "name": "App::isBooted", "doc": "&quot;Determine if the application has booted.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_boot", "name": "App::boot", "doc": "&quot;Boot the application&#039;s service providers.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_booting", "name": "App::booting", "doc": "&quot;Register a new boot listener.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_booted", "name": "App::booted", "doc": "&quot;Register a new \&quot;booted\&quot; listener.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_handle", "name": "App::handle", "doc": "&quot;{@inheritdoc}&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_shouldSkipMiddleware", "name": "App::shouldSkipMiddleware", "doc": "&quot;Determine if middleware has been disabled for the application.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_configurationIsCached", "name": "App::configurationIsCached", "doc": "&quot;Determine if the application configuration is cached.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_getCachedConfigPath", "name": "App::getCachedConfigPath", "doc": "&quot;Get the path to the configuration cache file.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_routesAreCached", "name": "App::routesAreCached", "doc": "&quot;Determine if the application routes are cached.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_getCachedRoutesPath", "name": "App::getCachedRoutesPath", "doc": "&quot;Get the path to the routes cache file.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_getCachedCompilePath", "name": "App::getCachedCompilePath", "doc": "&quot;Get the path to the cached \&quot;compiled.php\&quot; file.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_getCachedServicesPath", "name": "App::getCachedServicesPath", "doc": "&quot;Get the path to the cached services.php file.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_isDownForMaintenance", "name": "App::isDownForMaintenance", "doc": "&quot;Determine if the application is currently down for maintenance.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_abort", "name": "App::abort", "doc": "&quot;Throw an HttpException with the given data.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_terminating", "name": "App::terminating", "doc": "&quot;Register a terminating callback with the application.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_terminate", "name": "App::terminate", "doc": "&quot;Terminate the application.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_getLoadedProviders", "name": "App::getLoadedProviders", "doc": "&quot;Get the service providers that have been loaded.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_getDeferredServices", "name": "App::getDeferredServices", "doc": "&quot;Get the application&#039;s deferred services.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_setDeferredServices", "name": "App::setDeferredServices", "doc": "&quot;Set the application&#039;s deferred services.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_addDeferredServices", "name": "App::addDeferredServices", "doc": "&quot;Add an array of services to the application&#039;s deferred services.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_isDeferredService", "name": "App::isDeferredService", "doc": "&quot;Determine if the given service is a deferred service.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_configureMonologUsing", "name": "App::configureMonologUsing", "doc": "&quot;Define a callback to be used to configure Monolog.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_hasMonologConfigurator", "name": "App::hasMonologConfigurator", "doc": "&quot;Determine if the application has a custom Monolog configurator.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_getMonologConfigurator", "name": "App::getMonologConfigurator", "doc": "&quot;Get the custom Monolog configurator for the application.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_getLocale", "name": "App::getLocale", "doc": "&quot;Get the current application locale.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_setLocale", "name": "App::setLocale", "doc": "&quot;Set the current application locale.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_isLocale", "name": "App::isLocale", "doc": "&quot;Determine if application locale is the given locale.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_registerCoreContainerAliases", "name": "App::registerCoreContainerAliases", "doc": "&quot;Register the core class aliases in the container.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_flush", "name": "App::flush", "doc": "&quot;Flush the container of all bindings and resolved instances.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_getNamespace", "name": "App::getNamespace", "doc": "&quot;Get the application namespace.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_when", "name": "App::when", "doc": "&quot;Define a contextual binding.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_resolved", "name": "App::resolved", "doc": "&quot;Determine if the given abstract type has been resolved.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_isAlias", "name": "App::isAlias", "doc": "&quot;Determine if a given string is an alias.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_bind", "name": "App::bind", "doc": "&quot;Register a binding with the container.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_addContextualBinding", "name": "App::addContextualBinding", "doc": "&quot;Add a contextual binding to the container.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_bindIf", "name": "App::bindIf", "doc": "&quot;Register a binding if it hasn&#039;t already been registered.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_singleton", "name": "App::singleton", "doc": "&quot;Register a shared binding in the container.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_share", "name": "App::share", "doc": "&quot;Wrap a Closure such that it is shared.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_extend", "name": "App::extend", "doc": "&quot;\&quot;Extend\&quot; an abstract type in the container.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_instance", "name": "App::instance", "doc": "&quot;Register an existing instance as shared in the container.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_tag", "name": "App::tag", "doc": "&quot;Assign a set of tags to a given binding.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_tagged", "name": "App::tagged", "doc": "&quot;Resolve all of the bindings for a given tag.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_alias", "name": "App::alias", "doc": "&quot;Alias a type to a different name.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_rebinding", "name": "App::rebinding", "doc": "&quot;Bind a new callback to an abstract&#039;s rebind event.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_refresh", "name": "App::refresh", "doc": "&quot;Refresh an instance on the given target and method.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_wrap", "name": "App::wrap", "doc": "&quot;Wrap the given closure such that its dependencies will be injected when executed.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_call", "name": "App::call", "doc": "&quot;Call the given Closure \/ class@method and inject its dependencies.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_factory", "name": "App::factory", "doc": "&quot;Get a closure to resolve the given type from the container.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_build", "name": "App::build", "doc": "&quot;Instantiate a concrete instance of the given type.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_resolving", "name": "App::resolving", "doc": "&quot;Register a new resolving callback.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_afterResolving", "name": "App::afterResolving", "doc": "&quot;Register a new after resolving callback for all types.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_isShared", "name": "App::isShared", "doc": "&quot;Determine if a given type is shared.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_getAlias", "name": "App::getAlias", "doc": "&quot;Get the alias for an abstract if available.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_getBindings", "name": "App::getBindings", "doc": "&quot;Get the container&#039;s bindings.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_forgetInstance", "name": "App::forgetInstance", "doc": "&quot;Remove a resolved instance from the instance cache.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_forgetInstances", "name": "App::forgetInstances", "doc": "&quot;Clear all of the instances from the container.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_getInstance", "name": "App::getInstance", "doc": "&quot;Set the globally available instance of the container.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_setInstance", "name": "App::setInstance", "doc": "&quot;Set the shared instance of the container.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_offsetExists", "name": "App::offsetExists", "doc": "&quot;Determine if a given offset exists.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_offsetGet", "name": "App::offsetGet", "doc": "&quot;Get the value at a given offset.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_offsetSet", "name": "App::offsetSet", "doc": "&quot;Set the value at a given offset.&quot;"},
                    {"type": "Method", "fromName": "App", "fromLink": "App.html", "link": "App.html#method_offsetUnset", "name": "App::offsetUnset", "doc": "&quot;Unset the value at a given offset.&quot;"},
            
            {"type": "Class", "fromName": "App\\Console", "fromLink": "App/Console.html", "link": "App/Console/Kernel.html", "name": "App\\Console\\Kernel", "doc": "&quot;Class Kernel&quot;"},
                    
            {"type": "Class", "fromName": "App\\Exceptions", "fromLink": "App/Exceptions.html", "link": "App/Exceptions/Handler.html", "name": "App\\Exceptions\\Handler", "doc": "&quot;Class Handler&quot;"},
                                                        {"type": "Method", "fromName": "App\\Exceptions\\Handler", "fromLink": "App/Exceptions/Handler.html", "link": "App/Exceptions/Handler.html#method_report", "name": "App\\Exceptions\\Handler::report", "doc": "&quot;Report or log an exception.&quot;"},
                    {"type": "Method", "fromName": "App\\Exceptions\\Handler", "fromLink": "App/Exceptions/Handler.html", "link": "App/Exceptions/Handler.html#method_render", "name": "App\\Exceptions\\Handler::render", "doc": "&quot;Render an exception into an HTTP response.&quot;"},
            
            {"type": "Class", "fromName": "App\\Exceptions", "fromLink": "App/Exceptions.html", "link": "App/Exceptions/IncorrectModelException.html", "name": "App\\Exceptions\\IncorrectModelException", "doc": "&quot;Class IncorrectModelException&quot;"},
                    
            {"type": "Class", "fromName": "App\\Http\\Controllers\\Auth", "fromLink": "App/Http/Controllers/Auth.html", "link": "App/Http/Controllers/Auth/ForgotPasswordController.html", "name": "App\\Http\\Controllers\\Auth\\ForgotPasswordController", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "App\\Http\\Controllers\\Auth\\ForgotPasswordController", "fromLink": "App/Http/Controllers/Auth/ForgotPasswordController.html", "link": "App/Http/Controllers/Auth/ForgotPasswordController.html#method_showLinkRequestForm", "name": "App\\Http\\Controllers\\Auth\\ForgotPasswordController::showLinkRequestForm", "doc": "&quot;Display the form to request a password reset link.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\Auth\\ForgotPasswordController", "fromLink": "App/Http/Controllers/Auth/ForgotPasswordController.html", "link": "App/Http/Controllers/Auth/ForgotPasswordController.html#method___construct", "name": "App\\Http\\Controllers\\Auth\\ForgotPasswordController::__construct", "doc": "&quot;Create a new controller instance.&quot;"},
            
            {"type": "Class", "fromName": "App\\Http\\Controllers\\Auth", "fromLink": "App/Http/Controllers/Auth.html", "link": "App/Http/Controllers/Auth/LoginController.html", "name": "App\\Http\\Controllers\\Auth\\LoginController", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "App\\Http\\Controllers\\Auth\\LoginController", "fromLink": "App/Http/Controllers/Auth/LoginController.html", "link": "App/Http/Controllers/Auth/LoginController.html#method_showLoginForm", "name": "App\\Http\\Controllers\\Auth\\LoginController::showLoginForm", "doc": "&quot;Show the application&#039;s login form.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\Auth\\LoginController", "fromLink": "App/Http/Controllers/Auth/LoginController.html", "link": "App/Http/Controllers/Auth/LoginController.html#method___construct", "name": "App\\Http\\Controllers\\Auth\\LoginController::__construct", "doc": "&quot;Create a new controller instance.&quot;"},
            
            {"type": "Class", "fromName": "App\\Http\\Controllers\\Auth", "fromLink": "App/Http/Controllers/Auth.html", "link": "App/Http/Controllers/Auth/RegisterController.html", "name": "App\\Http\\Controllers\\Auth\\RegisterController", "doc": "&quot;Class RegisterController&quot;"},
                                                        {"type": "Method", "fromName": "App\\Http\\Controllers\\Auth\\RegisterController", "fromLink": "App/Http/Controllers/Auth/RegisterController.html", "link": "App/Http/Controllers/Auth/RegisterController.html#method_showRegistrationForm", "name": "App\\Http\\Controllers\\Auth\\RegisterController::showRegistrationForm", "doc": "&quot;Show the application registration form.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\Auth\\RegisterController", "fromLink": "App/Http/Controllers/Auth/RegisterController.html", "link": "App/Http/Controllers/Auth/RegisterController.html#method___construct", "name": "App\\Http\\Controllers\\Auth\\RegisterController::__construct", "doc": "&quot;Create a new controller instance.&quot;"},
            
            {"type": "Class", "fromName": "App\\Http\\Controllers\\Auth", "fromLink": "App/Http/Controllers/Auth.html", "link": "App/Http/Controllers/Auth/ResetPasswordController.html", "name": "App\\Http\\Controllers\\Auth\\ResetPasswordController", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "App\\Http\\Controllers\\Auth\\ResetPasswordController", "fromLink": "App/Http/Controllers/Auth/ResetPasswordController.html", "link": "App/Http/Controllers/Auth/ResetPasswordController.html#method_showResetForm", "name": "App\\Http\\Controllers\\Auth\\ResetPasswordController::showResetForm", "doc": "&quot;Display the password reset view for the given token.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\Auth\\ResetPasswordController", "fromLink": "App/Http/Controllers/Auth/ResetPasswordController.html", "link": "App/Http/Controllers/Auth/ResetPasswordController.html#method___construct", "name": "App\\Http\\Controllers\\Auth\\ResetPasswordController::__construct", "doc": "&quot;Create a new controller instance.&quot;"},
            
            {"type": "Class", "fromName": "App\\Http\\Controllers", "fromLink": "App/Http/Controllers.html", "link": "App/Http/Controllers/Controller.html", "name": "App\\Http\\Controllers\\Controller", "doc": "&quot;Class Controller&quot;"},
                                                        {"type": "Method", "fromName": "App\\Http\\Controllers\\Controller", "fromLink": "App/Http/Controllers/Controller.html", "link": "App/Http/Controllers/Controller.html#method___construct", "name": "App\\Http\\Controllers\\Controller::__construct", "doc": "&quot;Controller constructor.&quot;"},
            
            {"type": "Class", "fromName": "App\\Http\\Controllers", "fromLink": "App/Http/Controllers.html", "link": "App/Http/Controllers/HomeController.html", "name": "App\\Http\\Controllers\\HomeController", "doc": "&quot;Class HomeController&quot;"},
                                                        {"type": "Method", "fromName": "App\\Http\\Controllers\\HomeController", "fromLink": "App/Http/Controllers/HomeController.html", "link": "App/Http/Controllers/HomeController.html#method___construct", "name": "App\\Http\\Controllers\\HomeController::__construct", "doc": "&quot;Create a new controller instance.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\HomeController", "fromLink": "App/Http/Controllers/HomeController.html", "link": "App/Http/Controllers/HomeController.html#method_index", "name": "App\\Http\\Controllers\\HomeController::index", "doc": "&quot;Show the application dashboard.&quot;"},
            
            {"type": "Class", "fromName": "App\\Http\\Controllers", "fromLink": "App/Http/Controllers.html", "link": "App/Http/Controllers/TasksController.html", "name": "App\\Http\\Controllers\\TasksController", "doc": "&quot;Exemple de documentaci\u00f3:\nClass TasksController  -&gt;&gt; titol&quot;"},
                                                        {"type": "Method", "fromName": "App\\Http\\Controllers\\TasksController", "fromLink": "App/Http/Controllers/TasksController.html", "link": "App/Http/Controllers/TasksController.html#method___construct", "name": "App\\Http\\Controllers\\TasksController::__construct", "doc": "&quot;TasksController constructor.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\TasksController", "fromLink": "App/Http/Controllers/TasksController.html", "link": "App/Http/Controllers/TasksController.html#method_index", "name": "App\\Http\\Controllers\\TasksController::index", "doc": "&quot;Display a listing of the resource.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\TasksController", "fromLink": "App/Http/Controllers/TasksController.html", "link": "App/Http/Controllers/TasksController.html#method_create", "name": "App\\Http\\Controllers\\TasksController::create", "doc": "&quot;Show the form for creating a new resource.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\TasksController", "fromLink": "App/Http/Controllers/TasksController.html", "link": "App/Http/Controllers/TasksController.html#method_store", "name": "App\\Http\\Controllers\\TasksController::store", "doc": "&quot;Store a newly created resource in storage.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\TasksController", "fromLink": "App/Http/Controllers/TasksController.html", "link": "App/Http/Controllers/TasksController.html#method_show", "name": "App\\Http\\Controllers\\TasksController::show", "doc": "&quot;Display the specified resource.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\TasksController", "fromLink": "App/Http/Controllers/TasksController.html", "link": "App/Http/Controllers/TasksController.html#method_edit", "name": "App\\Http\\Controllers\\TasksController::edit", "doc": "&quot;Show the form for editing the specified resource.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\TasksController", "fromLink": "App/Http/Controllers/TasksController.html", "link": "App/Http/Controllers/TasksController.html#method_update", "name": "App\\Http\\Controllers\\TasksController::update", "doc": "&quot;Update the specified resource in storage.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\TasksController", "fromLink": "App/Http/Controllers/TasksController.html", "link": "App/Http/Controllers/TasksController.html#method_destroy", "name": "App\\Http\\Controllers\\TasksController::destroy", "doc": "&quot;Remove the specified resource from storage.&quot;"},
            
            {"type": "Class", "fromName": "App\\Http\\Controllers", "fromLink": "App/Http/Controllers.html", "link": "App/Http/Controllers/UserTaskController.html", "name": "App\\Http\\Controllers\\UserTaskController", "doc": "&quot;Class UserTaskController&quot;"},
                                                        {"type": "Method", "fromName": "App\\Http\\Controllers\\UserTaskController", "fromLink": "App/Http/Controllers/UserTaskController.html", "link": "App/Http/Controllers/UserTaskController.html#method___construct", "name": "App\\Http\\Controllers\\UserTaskController::__construct", "doc": "&quot;TasksController constructor.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\UserTaskController", "fromLink": "App/Http/Controllers/UserTaskController.html", "link": "App/Http/Controllers/UserTaskController.html#method_index", "name": "App\\Http\\Controllers\\UserTaskController::index", "doc": "&quot;Display a listing of the resource.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\UserTaskController", "fromLink": "App/Http/Controllers/UserTaskController.html", "link": "App/Http/Controllers/UserTaskController.html#method_create", "name": "App\\Http\\Controllers\\UserTaskController::create", "doc": "&quot;Show the form for creating a new resource.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\UserTaskController", "fromLink": "App/Http/Controllers/UserTaskController.html", "link": "App/Http/Controllers/UserTaskController.html#method_store", "name": "App\\Http\\Controllers\\UserTaskController::store", "doc": "&quot;Store a newly created resource in storage.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\UserTaskController", "fromLink": "App/Http/Controllers/UserTaskController.html", "link": "App/Http/Controllers/UserTaskController.html#method_show", "name": "App\\Http\\Controllers\\UserTaskController::show", "doc": "&quot;Display the specified resource.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\UserTaskController", "fromLink": "App/Http/Controllers/UserTaskController.html", "link": "App/Http/Controllers/UserTaskController.html#method_edit", "name": "App\\Http\\Controllers\\UserTaskController::edit", "doc": "&quot;Show the form for editing the specified resource.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\UserTaskController", "fromLink": "App/Http/Controllers/UserTaskController.html", "link": "App/Http/Controllers/UserTaskController.html#method_update", "name": "App\\Http\\Controllers\\UserTaskController::update", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\UserTaskController", "fromLink": "App/Http/Controllers/UserTaskController.html", "link": "App/Http/Controllers/UserTaskController.html#method_destroy", "name": "App\\Http\\Controllers\\UserTaskController::destroy", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "App\\Http\\Controllers", "fromLink": "App/Http/Controllers.html", "link": "App/Http/Controllers/UsersController.html", "name": "App\\Http\\Controllers\\UsersController", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "App\\Http\\Controllers\\UsersController", "fromLink": "App/Http/Controllers/UsersController.html", "link": "App/Http/Controllers/UsersController.html#method___construct", "name": "App\\Http\\Controllers\\UsersController::__construct", "doc": "&quot;TasksController constructor.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\UsersController", "fromLink": "App/Http/Controllers/UsersController.html", "link": "App/Http/Controllers/UsersController.html#method_index", "name": "App\\Http\\Controllers\\UsersController::index", "doc": "&quot;Display a listing of the resource.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\UsersController", "fromLink": "App/Http/Controllers/UsersController.html", "link": "App/Http/Controllers/UsersController.html#method_create", "name": "App\\Http\\Controllers\\UsersController::create", "doc": "&quot;Show the form for creating a new resource.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\UsersController", "fromLink": "App/Http/Controllers/UsersController.html", "link": "App/Http/Controllers/UsersController.html#method_store", "name": "App\\Http\\Controllers\\UsersController::store", "doc": "&quot;Store a newly created resource in storage.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\UsersController", "fromLink": "App/Http/Controllers/UsersController.html", "link": "App/Http/Controllers/UsersController.html#method_show", "name": "App\\Http\\Controllers\\UsersController::show", "doc": "&quot;Display the specified resource.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\UsersController", "fromLink": "App/Http/Controllers/UsersController.html", "link": "App/Http/Controllers/UsersController.html#method_edit", "name": "App\\Http\\Controllers\\UsersController::edit", "doc": "&quot;Show the form for editing the specified resource.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\UsersController", "fromLink": "App/Http/Controllers/UsersController.html", "link": "App/Http/Controllers/UsersController.html#method_update", "name": "App\\Http\\Controllers\\UsersController::update", "doc": "&quot;Update the specified resource in storage.&quot;"},
                    {"type": "Method", "fromName": "App\\Http\\Controllers\\UsersController", "fromLink": "App/Http/Controllers/UsersController.html", "link": "App/Http/Controllers/UsersController.html#method_destroy", "name": "App\\Http\\Controllers\\UsersController::destroy", "doc": "&quot;Remove the specified resource from storage.&quot;"},
            
            {"type": "Class", "fromName": "App\\Http", "fromLink": "App/Http.html", "link": "App/Http/Kernel.html", "name": "App\\Http\\Kernel", "doc": "&quot;Class Kernel&quot;"},
                    
            {"type": "Class", "fromName": "App\\Http\\Middleware", "fromLink": "App/Http/Middleware.html", "link": "App/Http/Middleware/EncryptCookies.html", "name": "App\\Http\\Middleware\\EncryptCookies", "doc": "&quot;Class EncryptCookies&quot;"},
                    
            {"type": "Class", "fromName": "App\\Http\\Middleware", "fromLink": "App/Http/Middleware.html", "link": "App/Http/Middleware/RedirectIfAuthenticated.html", "name": "App\\Http\\Middleware\\RedirectIfAuthenticated", "doc": "&quot;Class RedirectIfAuthenticated&quot;"},
                                                        {"type": "Method", "fromName": "App\\Http\\Middleware\\RedirectIfAuthenticated", "fromLink": "App/Http/Middleware/RedirectIfAuthenticated.html", "link": "App/Http/Middleware/RedirectIfAuthenticated.html#method_handle", "name": "App\\Http\\Middleware\\RedirectIfAuthenticated::handle", "doc": "&quot;Handle an incoming request.&quot;"},
            
            {"type": "Class", "fromName": "App\\Http\\Middleware", "fromLink": "App/Http/Middleware.html", "link": "App/Http/Middleware/VerifyCsrfToken.html", "name": "App\\Http\\Middleware\\VerifyCsrfToken", "doc": "&quot;Class VerifyCsrfToken&quot;"},
                    
            {"type": "Class", "fromName": "App\\Providers", "fromLink": "App/Providers.html", "link": "App/Providers/AppServiceProvider.html", "name": "App\\Providers\\AppServiceProvider", "doc": "&quot;Class AppServiceProvider&quot;"},
                                                        {"type": "Method", "fromName": "App\\Providers\\AppServiceProvider", "fromLink": "App/Providers/AppServiceProvider.html", "link": "App/Providers/AppServiceProvider.html#method_boot", "name": "App\\Providers\\AppServiceProvider::boot", "doc": "&quot;Bootstrap any application services.&quot;"},
                    {"type": "Method", "fromName": "App\\Providers\\AppServiceProvider", "fromLink": "App/Providers/AppServiceProvider.html", "link": "App/Providers/AppServiceProvider.html#method_register", "name": "App\\Providers\\AppServiceProvider::register", "doc": "&quot;Register any application services.&quot;"},
            
            {"type": "Class", "fromName": "App\\Providers", "fromLink": "App/Providers.html", "link": "App/Providers/AuthServiceProvider.html", "name": "App\\Providers\\AuthServiceProvider", "doc": "&quot;Class AuthServiceProvider&quot;"},
                                                        {"type": "Method", "fromName": "App\\Providers\\AuthServiceProvider", "fromLink": "App/Providers/AuthServiceProvider.html", "link": "App/Providers/AuthServiceProvider.html#method_boot", "name": "App\\Providers\\AuthServiceProvider::boot", "doc": "&quot;Register any authentication \/ authorization services.&quot;"},
            
            {"type": "Class", "fromName": "App\\Providers", "fromLink": "App/Providers.html", "link": "App/Providers/BroadcastServiceProvider.html", "name": "App\\Providers\\BroadcastServiceProvider", "doc": "&quot;Class BroadcastServiceProvider&quot;"},
                                                        {"type": "Method", "fromName": "App\\Providers\\BroadcastServiceProvider", "fromLink": "App/Providers/BroadcastServiceProvider.html", "link": "App/Providers/BroadcastServiceProvider.html#method_boot", "name": "App\\Providers\\BroadcastServiceProvider::boot", "doc": "&quot;Bootstrap any application services.&quot;"},
            
            {"type": "Class", "fromName": "App\\Providers", "fromLink": "App/Providers.html", "link": "App/Providers/EventServiceProvider.html", "name": "App\\Providers\\EventServiceProvider", "doc": "&quot;Class EventServiceProvider&quot;"},
                                                        {"type": "Method", "fromName": "App\\Providers\\EventServiceProvider", "fromLink": "App/Providers/EventServiceProvider.html", "link": "App/Providers/EventServiceProvider.html#method_boot", "name": "App\\Providers\\EventServiceProvider::boot", "doc": "&quot;Register any events for your application.&quot;"},
            
            {"type": "Class", "fromName": "App\\Providers", "fromLink": "App/Providers.html", "link": "App/Providers/RouteServiceProvider.html", "name": "App\\Providers\\RouteServiceProvider", "doc": "&quot;Class RouteServiceProvider&quot;"},
                                                        {"type": "Method", "fromName": "App\\Providers\\RouteServiceProvider", "fromLink": "App/Providers/RouteServiceProvider.html", "link": "App/Providers/RouteServiceProvider.html#method_boot", "name": "App\\Providers\\RouteServiceProvider::boot", "doc": "&quot;Define your route model bindings, pattern filters, etc.&quot;"},
                    {"type": "Method", "fromName": "App\\Providers\\RouteServiceProvider", "fromLink": "App/Providers/RouteServiceProvider.html", "link": "App/Providers/RouteServiceProvider.html#method_map", "name": "App\\Providers\\RouteServiceProvider::map", "doc": "&quot;Define the routes for the application.&quot;"},
            
            {"type": "Class", "fromName": "App\\Repositories\\Contracts", "fromLink": "App/Repositories/Contracts.html", "link": "App/Repositories/Contracts/Repository.html", "name": "App\\Repositories\\Contracts\\Repository", "doc": "&quot;Interface Repository&quot;"},
                                                        {"type": "Method", "fromName": "App\\Repositories\\Contracts\\Repository", "fromLink": "App/Repositories/Contracts/Repository.html", "link": "App/Repositories/Contracts/Repository.html#method_find", "name": "App\\Repositories\\Contracts\\Repository::find", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "App\\Repositories", "fromLink": "App/Repositories.html", "link": "App/Repositories/TaskRepository.html", "name": "App\\Repositories\\TaskRepository", "doc": "&quot;Class TaskRepository&quot;"},
                                                        {"type": "Method", "fromName": "App\\Repositories\\TaskRepository", "fromLink": "App/Repositories/TaskRepository.html", "link": "App/Repositories/TaskRepository.html#method_find", "name": "App\\Repositories\\TaskRepository::find", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "App\\Repositories", "fromLink": "App/Repositories.html", "link": "App/Repositories/UserRepository.html", "name": "App\\Repositories\\UserRepository", "doc": "&quot;Class UserRepository&quot;"},
                                                        {"type": "Method", "fromName": "App\\Repositories\\UserRepository", "fromLink": "App/Repositories/UserRepository.html", "link": "App/Repositories/UserRepository.html#method_find", "name": "App\\Repositories\\UserRepository::find", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "App", "fromLink": "App.html", "link": "App/Task.html", "name": "App\\Task", "doc": "&quot;Class Task&quot;"},
                                                        {"type": "Method", "fromName": "App\\Task", "fromLink": "App/Task.html", "link": "App/Task.html#method_user", "name": "App\\Task::user", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "App\\Transformers\\Contracts", "fromLink": "App/Transformers/Contracts.html", "link": "App/Transformers/Contracts/Transformer.html", "name": "App\\Transformers\\Contracts\\Transformer", "doc": "&quot;Interface Transformer&quot;"},
                                                        {"type": "Method", "fromName": "App\\Transformers\\Contracts\\Transformer", "fromLink": "App/Transformers/Contracts/Transformer.html", "link": "App/Transformers/Contracts/Transformer.html#method_transform", "name": "App\\Transformers\\Contracts\\Transformer::transform", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "App\\Transformers\\Contracts\\Transformer", "fromLink": "App/Transformers/Contracts/Transformer.html", "link": "App/Transformers/Contracts/Transformer.html#method_transformCollections", "name": "App\\Transformers\\Contracts\\Transformer::transformCollections", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "App\\Transformers", "fromLink": "App/Transformers.html", "link": "App/Transformers/TaskTransformer.html", "name": "App\\Transformers\\TaskTransformer", "doc": "&quot;Class TaskTransformer&quot;"},
                                                        {"type": "Method", "fromName": "App\\Transformers\\TaskTransformer", "fromLink": "App/Transformers/TaskTransformer.html", "link": "App/Transformers/TaskTransformer.html#method_transform", "name": "App\\Transformers\\TaskTransformer::transform", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "App\\Transformers", "fromLink": "App/Transformers.html", "link": "App/Transformers/Transformer.html", "name": "App\\Transformers\\Transformer", "doc": "&quot;Class Transformer&quot;"},
                                                        {"type": "Method", "fromName": "App\\Transformers\\Transformer", "fromLink": "App/Transformers/Transformer.html", "link": "App/Transformers/Transformer.html#method_transformCollections", "name": "App\\Transformers\\Transformer::transformCollections", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "App\\Transformers", "fromLink": "App/Transformers.html", "link": "App/Transformers/UserTransformer.html", "name": "App\\Transformers\\UserTransformer", "doc": "&quot;Class UserTransformer&quot;"},
                                                        {"type": "Method", "fromName": "App\\Transformers\\UserTransformer", "fromLink": "App/Transformers/UserTransformer.html", "link": "App/Transformers/UserTransformer.html#method_transform", "name": "App\\Transformers\\UserTransformer::transform", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "App", "fromLink": "App.html", "link": "App/User.html", "name": "App\\User", "doc": "&quot;Class User&quot;"},
                                                        {"type": "Method", "fromName": "App\\User", "fromLink": "App/User.html", "link": "App/User.html#method_tasks", "name": "App\\User::tasks", "doc": "&quot;&quot;"},
            
            {"type": "Class",  "link": "Artisan.html", "name": "Artisan", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Artisan", "fromLink": "Artisan.html", "link": "Artisan.html#method_handle", "name": "Artisan::handle", "doc": "&quot;Run the console application.&quot;"},
                    {"type": "Method", "fromName": "Artisan", "fromLink": "Artisan.html", "link": "Artisan.html#method_terminate", "name": "Artisan::terminate", "doc": "&quot;Terminate the application.&quot;"},
                    {"type": "Method", "fromName": "Artisan", "fromLink": "Artisan.html", "link": "Artisan.html#method_command", "name": "Artisan::command", "doc": "&quot;Register a Closure based command with the application.&quot;"},
                    {"type": "Method", "fromName": "Artisan", "fromLink": "Artisan.html", "link": "Artisan.html#method_registerCommand", "name": "Artisan::registerCommand", "doc": "&quot;Register the given command with the console application.&quot;"},
                    {"type": "Method", "fromName": "Artisan", "fromLink": "Artisan.html", "link": "Artisan.html#method_call", "name": "Artisan::call", "doc": "&quot;Run an Artisan console command by name.&quot;"},
                    {"type": "Method", "fromName": "Artisan", "fromLink": "Artisan.html", "link": "Artisan.html#method_queue", "name": "Artisan::queue", "doc": "&quot;Queue the given console command.&quot;"},
                    {"type": "Method", "fromName": "Artisan", "fromLink": "Artisan.html", "link": "Artisan.html#method_all", "name": "Artisan::all", "doc": "&quot;Get all of the commands registered with the console.&quot;"},
                    {"type": "Method", "fromName": "Artisan", "fromLink": "Artisan.html", "link": "Artisan.html#method_output", "name": "Artisan::output", "doc": "&quot;Get the output for the last run command.&quot;"},
                    {"type": "Method", "fromName": "Artisan", "fromLink": "Artisan.html", "link": "Artisan.html#method_bootstrap", "name": "Artisan::bootstrap", "doc": "&quot;Bootstrap the application for artisan commands.&quot;"},
                    {"type": "Method", "fromName": "Artisan", "fromLink": "Artisan.html", "link": "Artisan.html#method_setArtisan", "name": "Artisan::setArtisan", "doc": "&quot;Set the Artisan application instance.&quot;"},
            
            {"type": "Class",  "link": "Auth.html", "name": "Auth", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_guard", "name": "Auth::guard", "doc": "&quot;Attempt to get the guard from the local cache.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_createSessionDriver", "name": "Auth::createSessionDriver", "doc": "&quot;Create a session based authentication guard.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_createTokenDriver", "name": "Auth::createTokenDriver", "doc": "&quot;Create a token based authentication guard.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_getDefaultDriver", "name": "Auth::getDefaultDriver", "doc": "&quot;Get the default authentication driver name.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_shouldUse", "name": "Auth::shouldUse", "doc": "&quot;Set the default guard driver the factory should serve.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_setDefaultDriver", "name": "Auth::setDefaultDriver", "doc": "&quot;Set the default authentication driver name.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_viaRequest", "name": "Auth::viaRequest", "doc": "&quot;Register a new callback based request guard.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_userResolver", "name": "Auth::userResolver", "doc": "&quot;Get the user resolver callback.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_resolveUsersUsing", "name": "Auth::resolveUsersUsing", "doc": "&quot;Set the callback to be used to resolve users.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_extend", "name": "Auth::extend", "doc": "&quot;Register a custom driver creator Closure.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_provider", "name": "Auth::provider", "doc": "&quot;Register a custom provider creator Closure.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_createUserProvider", "name": "Auth::createUserProvider", "doc": "&quot;Create the user provider implementation for the driver.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_user", "name": "Auth::user", "doc": "&quot;Get the currently authenticated user.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_id", "name": "Auth::id", "doc": "&quot;Get the ID for the currently authenticated user.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_once", "name": "Auth::once", "doc": "&quot;Log a user into the application without sessions or cookies.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_validate", "name": "Auth::validate", "doc": "&quot;Validate a user&#039;s credentials.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_basic", "name": "Auth::basic", "doc": "&quot;Attempt to authenticate using HTTP Basic Auth.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_onceBasic", "name": "Auth::onceBasic", "doc": "&quot;Perform a stateless HTTP Basic login attempt.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_attempt", "name": "Auth::attempt", "doc": "&quot;Attempt to authenticate a user using the given credentials.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_attempting", "name": "Auth::attempting", "doc": "&quot;Register an authentication attempt event listener.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_login", "name": "Auth::login", "doc": "&quot;Log a user into the application.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_loginUsingId", "name": "Auth::loginUsingId", "doc": "&quot;Log the given user ID into the application.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_onceUsingId", "name": "Auth::onceUsingId", "doc": "&quot;Log the given user ID into the application without sessions or cookies.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_logout", "name": "Auth::logout", "doc": "&quot;Log the user out of the application.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_getCookieJar", "name": "Auth::getCookieJar", "doc": "&quot;Get the cookie creator instance used by the guard.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_setCookieJar", "name": "Auth::setCookieJar", "doc": "&quot;Set the cookie creator instance used by the guard.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_getDispatcher", "name": "Auth::getDispatcher", "doc": "&quot;Get the event dispatcher instance.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_setDispatcher", "name": "Auth::setDispatcher", "doc": "&quot;Set the event dispatcher instance.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_getSession", "name": "Auth::getSession", "doc": "&quot;Get the session store used by the guard.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_getProvider", "name": "Auth::getProvider", "doc": "&quot;Get the user provider used by the guard.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_setProvider", "name": "Auth::setProvider", "doc": "&quot;Set the user provider used by the guard.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_getUser", "name": "Auth::getUser", "doc": "&quot;Return the currently cached user.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_setUser", "name": "Auth::setUser", "doc": "&quot;Set the current user.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_getRequest", "name": "Auth::getRequest", "doc": "&quot;Get the current request instance.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_setRequest", "name": "Auth::setRequest", "doc": "&quot;Set the current request instance.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_getLastAttempted", "name": "Auth::getLastAttempted", "doc": "&quot;Get the last user we attempted to authenticate.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_getName", "name": "Auth::getName", "doc": "&quot;Get a unique identifier for the auth session value.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_getRecallerName", "name": "Auth::getRecallerName", "doc": "&quot;Get the name of the cookie used to store the \&quot;recaller\&quot;.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_viaRemember", "name": "Auth::viaRemember", "doc": "&quot;Determine if the user was authenticated via \&quot;remember me\&quot; cookie.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_authenticate", "name": "Auth::authenticate", "doc": "&quot;Determine if the current user is authenticated.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_check", "name": "Auth::check", "doc": "&quot;Determine if the current user is authenticated.&quot;"},
                    {"type": "Method", "fromName": "Auth", "fromLink": "Auth.html", "link": "Auth.html#method_guest", "name": "Auth::guest", "doc": "&quot;Determine if the current user is a guest.&quot;"},
            
            {"type": "Class",  "link": "Blade.html", "name": "Blade", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Blade", "fromLink": "Blade.html", "link": "Blade.html#method_compile", "name": "Blade::compile", "doc": "&quot;Compile the view at the given path.&quot;"},
                    {"type": "Method", "fromName": "Blade", "fromLink": "Blade.html", "link": "Blade.html#method_getPath", "name": "Blade::getPath", "doc": "&quot;Get the path currently being compiled.&quot;"},
                    {"type": "Method", "fromName": "Blade", "fromLink": "Blade.html", "link": "Blade.html#method_setPath", "name": "Blade::setPath", "doc": "&quot;Set the path currently being compiled.&quot;"},
                    {"type": "Method", "fromName": "Blade", "fromLink": "Blade.html", "link": "Blade.html#method_compileString", "name": "Blade::compileString", "doc": "&quot;Compile the given Blade template contents.&quot;"},
                    {"type": "Method", "fromName": "Blade", "fromLink": "Blade.html", "link": "Blade.html#method_compileEchoDefaults", "name": "Blade::compileEchoDefaults", "doc": "&quot;Compile the default values for the echo statement.&quot;"},
                    {"type": "Method", "fromName": "Blade", "fromLink": "Blade.html", "link": "Blade.html#method_stripParentheses", "name": "Blade::stripParentheses", "doc": "&quot;Strip the parentheses from the given expression.&quot;"},
                    {"type": "Method", "fromName": "Blade", "fromLink": "Blade.html", "link": "Blade.html#method_getExtensions", "name": "Blade::getExtensions", "doc": "&quot;Get the extensions used by the compiler.&quot;"},
                    {"type": "Method", "fromName": "Blade", "fromLink": "Blade.html", "link": "Blade.html#method_extend", "name": "Blade::extend", "doc": "&quot;Register a custom Blade compiler.&quot;"},
                    {"type": "Method", "fromName": "Blade", "fromLink": "Blade.html", "link": "Blade.html#method_directive", "name": "Blade::directive", "doc": "&quot;Register a handler for custom directives.&quot;"},
                    {"type": "Method", "fromName": "Blade", "fromLink": "Blade.html", "link": "Blade.html#method_getCustomDirectives", "name": "Blade::getCustomDirectives", "doc": "&quot;Get the list of custom directives.&quot;"},
                    {"type": "Method", "fromName": "Blade", "fromLink": "Blade.html", "link": "Blade.html#method_getRawTags", "name": "Blade::getRawTags", "doc": "&quot;Gets the raw tags used by the compiler.&quot;"},
                    {"type": "Method", "fromName": "Blade", "fromLink": "Blade.html", "link": "Blade.html#method_setRawTags", "name": "Blade::setRawTags", "doc": "&quot;Sets the raw tags used for the compiler.&quot;"},
                    {"type": "Method", "fromName": "Blade", "fromLink": "Blade.html", "link": "Blade.html#method_setContentTags", "name": "Blade::setContentTags", "doc": "&quot;Sets the content tags used for the compiler.&quot;"},
                    {"type": "Method", "fromName": "Blade", "fromLink": "Blade.html", "link": "Blade.html#method_setEscapedContentTags", "name": "Blade::setEscapedContentTags", "doc": "&quot;Sets the escaped content tags used for the compiler.&quot;"},
                    {"type": "Method", "fromName": "Blade", "fromLink": "Blade.html", "link": "Blade.html#method_getContentTags", "name": "Blade::getContentTags", "doc": "&quot;Gets the content tags used for the compiler.&quot;"},
                    {"type": "Method", "fromName": "Blade", "fromLink": "Blade.html", "link": "Blade.html#method_getEscapedContentTags", "name": "Blade::getEscapedContentTags", "doc": "&quot;Gets the escaped content tags used for the compiler.&quot;"},
                    {"type": "Method", "fromName": "Blade", "fromLink": "Blade.html", "link": "Blade.html#method_setEchoFormat", "name": "Blade::setEchoFormat", "doc": "&quot;Set the echo format to be used by the compiler.&quot;"},
                    {"type": "Method", "fromName": "Blade", "fromLink": "Blade.html", "link": "Blade.html#method_getCompiledPath", "name": "Blade::getCompiledPath", "doc": "&quot;Get the path to the compiled version of a view.&quot;"},
                    {"type": "Method", "fromName": "Blade", "fromLink": "Blade.html", "link": "Blade.html#method_isExpired", "name": "Blade::isExpired", "doc": "&quot;Determine if the view at the given path is expired.&quot;"},
            
            {"type": "Class",  "link": "Bus.html", "name": "Bus", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Bus", "fromLink": "Bus.html", "link": "Bus.html#method_dispatch", "name": "Bus::dispatch", "doc": "&quot;Dispatch a command to its appropriate handler.&quot;"},
                    {"type": "Method", "fromName": "Bus", "fromLink": "Bus.html", "link": "Bus.html#method_dispatchNow", "name": "Bus::dispatchNow", "doc": "&quot;Dispatch a command to its appropriate handler in the current process.&quot;"},
                    {"type": "Method", "fromName": "Bus", "fromLink": "Bus.html", "link": "Bus.html#method_hasCommandHandler", "name": "Bus::hasCommandHandler", "doc": "&quot;Determine if the given command has a handler.&quot;"},
                    {"type": "Method", "fromName": "Bus", "fromLink": "Bus.html", "link": "Bus.html#method_getCommandHandler", "name": "Bus::getCommandHandler", "doc": "&quot;Retrieve the handler for a command.&quot;"},
                    {"type": "Method", "fromName": "Bus", "fromLink": "Bus.html", "link": "Bus.html#method_dispatchToQueue", "name": "Bus::dispatchToQueue", "doc": "&quot;Dispatch a command to its appropriate handler behind a queue.&quot;"},
                    {"type": "Method", "fromName": "Bus", "fromLink": "Bus.html", "link": "Bus.html#method_pipeThrough", "name": "Bus::pipeThrough", "doc": "&quot;Set the pipes through which commands should be piped before dispatching.&quot;"},
                    {"type": "Method", "fromName": "Bus", "fromLink": "Bus.html", "link": "Bus.html#method_map", "name": "Bus::map", "doc": "&quot;Map a command to a handler.&quot;"},
            
            {"type": "Class",  "link": "Cache.html", "name": "Cache", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_store", "name": "Cache::store", "doc": "&quot;Get a cache store instance by name.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_driver", "name": "Cache::driver", "doc": "&quot;Get a cache driver instance.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_repository", "name": "Cache::repository", "doc": "&quot;Create a new cache repository with the given implementation.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_getDefaultDriver", "name": "Cache::getDefaultDriver", "doc": "&quot;Get the default cache driver name.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_setDefaultDriver", "name": "Cache::setDefaultDriver", "doc": "&quot;Set the default cache driver name.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_extend", "name": "Cache::extend", "doc": "&quot;Register a custom driver creator Closure.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_setEventDispatcher", "name": "Cache::setEventDispatcher", "doc": "&quot;Set the event dispatcher instance.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_has", "name": "Cache::has", "doc": "&quot;Determine if an item exists in the cache.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_get", "name": "Cache::get", "doc": "&quot;Retrieve an item from the cache by key.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_many", "name": "Cache::many", "doc": "&quot;Retrieve multiple items from the cache by key.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_pull", "name": "Cache::pull", "doc": "&quot;Retrieve an item from the cache and delete it.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_put", "name": "Cache::put", "doc": "&quot;Store an item in the cache.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_putMany", "name": "Cache::putMany", "doc": "&quot;Store multiple items in the cache for a given number of minutes.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_add", "name": "Cache::add", "doc": "&quot;Store an item in the cache if the key does not exist.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_increment", "name": "Cache::increment", "doc": "&quot;Increment the value of an item in the cache.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_decrement", "name": "Cache::decrement", "doc": "&quot;Decrement the value of an item in the cache.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_forever", "name": "Cache::forever", "doc": "&quot;Store an item in the cache indefinitely.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_remember", "name": "Cache::remember", "doc": "&quot;Get an item from the cache, or store the default value.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_sear", "name": "Cache::sear", "doc": "&quot;Get an item from the cache, or store the default value forever.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_rememberForever", "name": "Cache::rememberForever", "doc": "&quot;Get an item from the cache, or store the default value forever.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_forget", "name": "Cache::forget", "doc": "&quot;Remove an item from the cache.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_tags", "name": "Cache::tags", "doc": "&quot;Begin executing a new tags operation if the store supports it.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_getDefaultCacheTime", "name": "Cache::getDefaultCacheTime", "doc": "&quot;Get the default cache time.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_setDefaultCacheTime", "name": "Cache::setDefaultCacheTime", "doc": "&quot;Set the default cache time in minutes.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_getStore", "name": "Cache::getStore", "doc": "&quot;Get the cache store implementation.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_offsetExists", "name": "Cache::offsetExists", "doc": "&quot;Determine if a cached value exists.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_offsetGet", "name": "Cache::offsetGet", "doc": "&quot;Retrieve an item from the cache by key.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_offsetSet", "name": "Cache::offsetSet", "doc": "&quot;Store an item in the cache for the default time.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_offsetUnset", "name": "Cache::offsetUnset", "doc": "&quot;Remove an item from the cache.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_macro", "name": "Cache::macro", "doc": "&quot;Register a custom macro.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_hasMacro", "name": "Cache::hasMacro", "doc": "&quot;Checks if macro is registered.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_macroCall", "name": "Cache::macroCall", "doc": "&quot;Dynamically handle calls to the class.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_flush", "name": "Cache::flush", "doc": "&quot;Remove all items from the cache.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_getFilesystem", "name": "Cache::getFilesystem", "doc": "&quot;Get the Filesystem instance.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_getDirectory", "name": "Cache::getDirectory", "doc": "&quot;Get the working directory of the cache.&quot;"},
                    {"type": "Method", "fromName": "Cache", "fromLink": "Cache.html", "link": "Cache.html#method_getPrefix", "name": "Cache::getPrefix", "doc": "&quot;Get the cache key prefix.&quot;"},
            
            {"type": "Class",  "link": "Config.html", "name": "Config", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Config", "fromLink": "Config.html", "link": "Config.html#method_has", "name": "Config::has", "doc": "&quot;Determine if the given configuration value exists.&quot;"},
                    {"type": "Method", "fromName": "Config", "fromLink": "Config.html", "link": "Config.html#method_get", "name": "Config::get", "doc": "&quot;Get the specified configuration value.&quot;"},
                    {"type": "Method", "fromName": "Config", "fromLink": "Config.html", "link": "Config.html#method_set", "name": "Config::set", "doc": "&quot;Set a given configuration value.&quot;"},
                    {"type": "Method", "fromName": "Config", "fromLink": "Config.html", "link": "Config.html#method_prepend", "name": "Config::prepend", "doc": "&quot;Prepend a value onto an array configuration value.&quot;"},
                    {"type": "Method", "fromName": "Config", "fromLink": "Config.html", "link": "Config.html#method_push", "name": "Config::push", "doc": "&quot;Push a value onto an array configuration value.&quot;"},
                    {"type": "Method", "fromName": "Config", "fromLink": "Config.html", "link": "Config.html#method_all", "name": "Config::all", "doc": "&quot;Get all of the configuration items for the application.&quot;"},
                    {"type": "Method", "fromName": "Config", "fromLink": "Config.html", "link": "Config.html#method_offsetExists", "name": "Config::offsetExists", "doc": "&quot;Determine if the given configuration option exists.&quot;"},
                    {"type": "Method", "fromName": "Config", "fromLink": "Config.html", "link": "Config.html#method_offsetGet", "name": "Config::offsetGet", "doc": "&quot;Get a configuration option.&quot;"},
                    {"type": "Method", "fromName": "Config", "fromLink": "Config.html", "link": "Config.html#method_offsetSet", "name": "Config::offsetSet", "doc": "&quot;Set a configuration option.&quot;"},
                    {"type": "Method", "fromName": "Config", "fromLink": "Config.html", "link": "Config.html#method_offsetUnset", "name": "Config::offsetUnset", "doc": "&quot;Unset a configuration option.&quot;"},
            
            {"type": "Class",  "link": "Cookie.html", "name": "Cookie", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Cookie", "fromLink": "Cookie.html", "link": "Cookie.html#method_make", "name": "Cookie::make", "doc": "&quot;Create a new cookie instance.&quot;"},
                    {"type": "Method", "fromName": "Cookie", "fromLink": "Cookie.html", "link": "Cookie.html#method_forever", "name": "Cookie::forever", "doc": "&quot;Create a cookie that lasts \&quot;forever\&quot; (five years).&quot;"},
                    {"type": "Method", "fromName": "Cookie", "fromLink": "Cookie.html", "link": "Cookie.html#method_forget", "name": "Cookie::forget", "doc": "&quot;Expire the given cookie.&quot;"},
                    {"type": "Method", "fromName": "Cookie", "fromLink": "Cookie.html", "link": "Cookie.html#method_hasQueued", "name": "Cookie::hasQueued", "doc": "&quot;Determine if a cookie has been queued.&quot;"},
                    {"type": "Method", "fromName": "Cookie", "fromLink": "Cookie.html", "link": "Cookie.html#method_queued", "name": "Cookie::queued", "doc": "&quot;Get a queued cookie instance.&quot;"},
                    {"type": "Method", "fromName": "Cookie", "fromLink": "Cookie.html", "link": "Cookie.html#method_queue", "name": "Cookie::queue", "doc": "&quot;Queue a cookie to send with the next response.&quot;"},
                    {"type": "Method", "fromName": "Cookie", "fromLink": "Cookie.html", "link": "Cookie.html#method_unqueue", "name": "Cookie::unqueue", "doc": "&quot;Remove a cookie from the queue.&quot;"},
                    {"type": "Method", "fromName": "Cookie", "fromLink": "Cookie.html", "link": "Cookie.html#method_setDefaultPathAndDomain", "name": "Cookie::setDefaultPathAndDomain", "doc": "&quot;Set the default path and domain for the jar.&quot;"},
                    {"type": "Method", "fromName": "Cookie", "fromLink": "Cookie.html", "link": "Cookie.html#method_getQueuedCookies", "name": "Cookie::getQueuedCookies", "doc": "&quot;Get the cookies which have been queued for the next request.&quot;"},
            
            {"type": "Class",  "link": "CreatePasswordResetsTable.html", "name": "CreatePasswordResetsTable", "doc": "&quot;Class CreatePasswordResetsTable&quot;"},
                                                        {"type": "Method", "fromName": "CreatePasswordResetsTable", "fromLink": "CreatePasswordResetsTable.html", "link": "CreatePasswordResetsTable.html#method_up", "name": "CreatePasswordResetsTable::up", "doc": "&quot;Run the migrations.&quot;"},
                    {"type": "Method", "fromName": "CreatePasswordResetsTable", "fromLink": "CreatePasswordResetsTable.html", "link": "CreatePasswordResetsTable.html#method_down", "name": "CreatePasswordResetsTable::down", "doc": "&quot;Reverse the migrations.&quot;"},
            
            {"type": "Class",  "link": "CreateTasksTable.html", "name": "CreateTasksTable", "doc": "&quot;Class CreateTasksTable&quot;"},
                                                        {"type": "Method", "fromName": "CreateTasksTable", "fromLink": "CreateTasksTable.html", "link": "CreateTasksTable.html#method_up", "name": "CreateTasksTable::up", "doc": "&quot;Run the migrations.&quot;"},
                    {"type": "Method", "fromName": "CreateTasksTable", "fromLink": "CreateTasksTable.html", "link": "CreateTasksTable.html#method_down", "name": "CreateTasksTable::down", "doc": "&quot;Reverse the migrations.&quot;"},
            
            {"type": "Class",  "link": "CreateUsersTable.html", "name": "CreateUsersTable", "doc": "&quot;Class CreateUsersTable&quot;"},
                                                        {"type": "Method", "fromName": "CreateUsersTable", "fromLink": "CreateUsersTable.html", "link": "CreateUsersTable.html#method_up", "name": "CreateUsersTable::up", "doc": "&quot;Run the migrations.&quot;"},
                    {"type": "Method", "fromName": "CreateUsersTable", "fromLink": "CreateUsersTable.html", "link": "CreateUsersTable.html#method_down", "name": "CreateUsersTable::down", "doc": "&quot;Reverse the migrations.&quot;"},
            
            {"type": "Class",  "link": "Crypt.html", "name": "Crypt", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Crypt", "fromLink": "Crypt.html", "link": "Crypt.html#method_supported", "name": "Crypt::supported", "doc": "&quot;Determine if the given key and cipher combination is valid.&quot;"},
                    {"type": "Method", "fromName": "Crypt", "fromLink": "Crypt.html", "link": "Crypt.html#method_encrypt", "name": "Crypt::encrypt", "doc": "&quot;Encrypt the given value.&quot;"},
                    {"type": "Method", "fromName": "Crypt", "fromLink": "Crypt.html", "link": "Crypt.html#method_decrypt", "name": "Crypt::decrypt", "doc": "&quot;Decrypt the given value.&quot;"},
                    {"type": "Method", "fromName": "Crypt", "fromLink": "Crypt.html", "link": "Crypt.html#method_getKey", "name": "Crypt::getKey", "doc": "&quot;Get the encryption key.&quot;"},
            
            {"type": "Class",  "link": "DB.html", "name": "DB", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_connection", "name": "DB::connection", "doc": "&quot;Get a database connection instance.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_purge", "name": "DB::purge", "doc": "&quot;Disconnect from the given database and remove from local cache.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_disconnect", "name": "DB::disconnect", "doc": "&quot;Disconnect from the given database.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_reconnect", "name": "DB::reconnect", "doc": "&quot;Reconnect to the given database.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_getDefaultConnection", "name": "DB::getDefaultConnection", "doc": "&quot;Get the default connection name.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_setDefaultConnection", "name": "DB::setDefaultConnection", "doc": "&quot;Set the default connection name.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_supportedDrivers", "name": "DB::supportedDrivers", "doc": "&quot;Get all of the support drivers.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_availableDrivers", "name": "DB::availableDrivers", "doc": "&quot;Get all of the drivers that are actually available.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_extend", "name": "DB::extend", "doc": "&quot;Register an extension connection resolver.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_getConnections", "name": "DB::getConnections", "doc": "&quot;Return all of the created connections.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_useDefaultQueryGrammar", "name": "DB::useDefaultQueryGrammar", "doc": "&quot;Set the query grammar to the default implementation.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_useDefaultSchemaGrammar", "name": "DB::useDefaultSchemaGrammar", "doc": "&quot;Set the schema grammar to the default implementation.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_useDefaultPostProcessor", "name": "DB::useDefaultPostProcessor", "doc": "&quot;Set the query post processor to the default implementation.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_getSchemaBuilder", "name": "DB::getSchemaBuilder", "doc": "&quot;Get a schema builder instance for the connection.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_table", "name": "DB::table", "doc": "&quot;Begin a fluent query against a database table.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_query", "name": "DB::query", "doc": "&quot;Get a new query builder instance.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_raw", "name": "DB::raw", "doc": "&quot;Get a new raw query expression.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_selectOne", "name": "DB::selectOne", "doc": "&quot;Run a select statement and return a single result.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_selectFromWriteConnection", "name": "DB::selectFromWriteConnection", "doc": "&quot;Run a select statement against the database.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_select", "name": "DB::select", "doc": "&quot;Run a select statement against the database.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_cursor", "name": "DB::cursor", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_bindValues", "name": "DB::bindValues", "doc": "&quot;Bind values to their parameters in the given statement.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_insert", "name": "DB::insert", "doc": "&quot;Run an insert statement against the database.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_update", "name": "DB::update", "doc": "&quot;Run an update statement against the database.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_delete", "name": "DB::delete", "doc": "&quot;Run a delete statement against the database.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_statement", "name": "DB::statement", "doc": "&quot;Execute an SQL statement and return the boolean result.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_affectingStatement", "name": "DB::affectingStatement", "doc": "&quot;Run an SQL statement and get the number of rows affected.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_unprepared", "name": "DB::unprepared", "doc": "&quot;Run a raw, unprepared query against the PDO connection.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_prepareBindings", "name": "DB::prepareBindings", "doc": "&quot;Prepare the query bindings for execution.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_transaction", "name": "DB::transaction", "doc": "&quot;Execute a Closure within a transaction.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_beginTransaction", "name": "DB::beginTransaction", "doc": "&quot;Start a new database transaction.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_commit", "name": "DB::commit", "doc": "&quot;Commit the active database transaction.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_rollBack", "name": "DB::rollBack", "doc": "&quot;Rollback the active database transaction.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_transactionLevel", "name": "DB::transactionLevel", "doc": "&quot;Get the number of active transactions.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_pretend", "name": "DB::pretend", "doc": "&quot;Execute the given callback in \&quot;dry run\&quot; mode.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_logQuery", "name": "DB::logQuery", "doc": "&quot;Log a query in the connection&#039;s query log.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_listen", "name": "DB::listen", "doc": "&quot;Register a database query listener with the connection.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_isDoctrineAvailable", "name": "DB::isDoctrineAvailable", "doc": "&quot;Is Doctrine available?&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_getDoctrineColumn", "name": "DB::getDoctrineColumn", "doc": "&quot;Get a Doctrine Schema Column instance.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_getDoctrineSchemaManager", "name": "DB::getDoctrineSchemaManager", "doc": "&quot;Get the Doctrine DBAL schema manager for the connection.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_getDoctrineConnection", "name": "DB::getDoctrineConnection", "doc": "&quot;Get the Doctrine DBAL database connection instance.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_getPdo", "name": "DB::getPdo", "doc": "&quot;Get the current PDO connection.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_getReadPdo", "name": "DB::getReadPdo", "doc": "&quot;Get the current PDO connection used for reading.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_setPdo", "name": "DB::setPdo", "doc": "&quot;Set the PDO connection.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_setReadPdo", "name": "DB::setReadPdo", "doc": "&quot;Set the PDO connection used for reading.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_setReconnector", "name": "DB::setReconnector", "doc": "&quot;Set the reconnect instance on the connection.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_getName", "name": "DB::getName", "doc": "&quot;Get the database connection name.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_getConfig", "name": "DB::getConfig", "doc": "&quot;Get an option from the configuration options.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_getDriverName", "name": "DB::getDriverName", "doc": "&quot;Get the PDO driver name.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_getQueryGrammar", "name": "DB::getQueryGrammar", "doc": "&quot;Get the query grammar used by the connection.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_setQueryGrammar", "name": "DB::setQueryGrammar", "doc": "&quot;Set the query grammar used by the connection.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_getSchemaGrammar", "name": "DB::getSchemaGrammar", "doc": "&quot;Get the schema grammar used by the connection.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_setSchemaGrammar", "name": "DB::setSchemaGrammar", "doc": "&quot;Set the schema grammar used by the connection.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_getPostProcessor", "name": "DB::getPostProcessor", "doc": "&quot;Get the query post processor used by the connection.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_setPostProcessor", "name": "DB::setPostProcessor", "doc": "&quot;Set the query post processor used by the connection.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_getEventDispatcher", "name": "DB::getEventDispatcher", "doc": "&quot;Get the event dispatcher used by the connection.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_setEventDispatcher", "name": "DB::setEventDispatcher", "doc": "&quot;Set the event dispatcher instance on the connection.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_pretending", "name": "DB::pretending", "doc": "&quot;Determine if the connection in a \&quot;dry run\&quot;.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_getFetchMode", "name": "DB::getFetchMode", "doc": "&quot;Get the default fetch mode for the connection.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_getFetchArgument", "name": "DB::getFetchArgument", "doc": "&quot;Get the fetch argument to be applied when selecting.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_getFetchConstructorArgument", "name": "DB::getFetchConstructorArgument", "doc": "&quot;Get custom constructor arguments for the PDO::FETCH_CLASS fetch mode.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_setFetchMode", "name": "DB::setFetchMode", "doc": "&quot;Set the default fetch mode for the connection, and optional arguments for the given fetch mode.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_getQueryLog", "name": "DB::getQueryLog", "doc": "&quot;Get the connection query log.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_flushQueryLog", "name": "DB::flushQueryLog", "doc": "&quot;Clear the query log.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_enableQueryLog", "name": "DB::enableQueryLog", "doc": "&quot;Enable the query log on the connection.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_disableQueryLog", "name": "DB::disableQueryLog", "doc": "&quot;Disable the query log on the connection.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_logging", "name": "DB::logging", "doc": "&quot;Determine whether we&#039;re logging queries.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_getDatabaseName", "name": "DB::getDatabaseName", "doc": "&quot;Get the name of the connected database.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_setDatabaseName", "name": "DB::setDatabaseName", "doc": "&quot;Set the name of the connected database.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_getTablePrefix", "name": "DB::getTablePrefix", "doc": "&quot;Get the table prefix for the connection.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_setTablePrefix", "name": "DB::setTablePrefix", "doc": "&quot;Set the table prefix in use by the connection.&quot;"},
                    {"type": "Method", "fromName": "DB", "fromLink": "DB.html", "link": "DB.html#method_withTablePrefix", "name": "DB::withTablePrefix", "doc": "&quot;Set the table prefix and return the grammar.&quot;"},
            
            {"type": "Class",  "link": "DatabaseSeeder.html", "name": "DatabaseSeeder", "doc": "&quot;Class DatabaseSeeder&quot;"},
                                                        {"type": "Method", "fromName": "DatabaseSeeder", "fromLink": "DatabaseSeeder.html", "link": "DatabaseSeeder.html#method_run", "name": "DatabaseSeeder::run", "doc": "&quot;Run the database seeds.&quot;"},
            
            {"type": "Class",  "link": "Debugbar.html", "name": "Debugbar", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_enable", "name": "Debugbar::enable", "doc": "&quot;Enable the Debugbar and boot, if not already booted.&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_boot", "name": "Debugbar::boot", "doc": "&quot;Boot the debugbar (add collectors, renderer and listener)&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_shouldCollect", "name": "Debugbar::shouldCollect", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_startMeasure", "name": "Debugbar::startMeasure", "doc": "&quot;Starts a measure&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_stopMeasure", "name": "Debugbar::stopMeasure", "doc": "&quot;Stops a measure&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_addException", "name": "Debugbar::addException", "doc": "&quot;Adds an exception to be profiled in the debug bar&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_addThrowable", "name": "Debugbar::addThrowable", "doc": "&quot;Adds an exception to be profiled in the debug bar&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_getJavascriptRenderer", "name": "Debugbar::getJavascriptRenderer", "doc": "&quot;Returns a JavascriptRenderer for this instance&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_modifyResponse", "name": "Debugbar::modifyResponse", "doc": "&quot;Modify the response and inject the debugbar (or data in headers)&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_isEnabled", "name": "Debugbar::isEnabled", "doc": "&quot;Check if the Debugbar is enabled&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_collect", "name": "Debugbar::collect", "doc": "&quot;Collects the data from the collectors&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_injectDebugbar", "name": "Debugbar::injectDebugbar", "doc": "&quot;Injects the web debug toolbar into the given Response.&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_disable", "name": "Debugbar::disable", "doc": "&quot;Disable the Debugbar&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_addMeasure", "name": "Debugbar::addMeasure", "doc": "&quot;Adds a measure&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_measure", "name": "Debugbar::measure", "doc": "&quot;Utility function to measure the execution of a Closure&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_collectConsole", "name": "Debugbar::collectConsole", "doc": "&quot;Collect data in a CLI request&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_addMessage", "name": "Debugbar::addMessage", "doc": "&quot;Adds a message to the MessagesCollector&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_addCollector", "name": "Debugbar::addCollector", "doc": "&quot;Adds a data collector&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_hasCollector", "name": "Debugbar::hasCollector", "doc": "&quot;Checks if a data collector has been added&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_getCollector", "name": "Debugbar::getCollector", "doc": "&quot;Returns a data collector&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_getCollectors", "name": "Debugbar::getCollectors", "doc": "&quot;Returns an array of all data collectors&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_setRequestIdGenerator", "name": "Debugbar::setRequestIdGenerator", "doc": "&quot;Sets the request id generator&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_getRequestIdGenerator", "name": "Debugbar::getRequestIdGenerator", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_getCurrentRequestId", "name": "Debugbar::getCurrentRequestId", "doc": "&quot;Returns the id of the current request&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_setStorage", "name": "Debugbar::setStorage", "doc": "&quot;Sets the storage backend to use to store the collected data&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_getStorage", "name": "Debugbar::getStorage", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_isDataPersisted", "name": "Debugbar::isDataPersisted", "doc": "&quot;Checks if the data will be persisted&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_setHttpDriver", "name": "Debugbar::setHttpDriver", "doc": "&quot;Sets the HTTP driver&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_getHttpDriver", "name": "Debugbar::getHttpDriver", "doc": "&quot;Returns the HTTP driver&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_getData", "name": "Debugbar::getData", "doc": "&quot;Returns collected data&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_getDataAsHeaders", "name": "Debugbar::getDataAsHeaders", "doc": "&quot;Returns an array of HTTP headers containing the data&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_sendDataInHeaders", "name": "Debugbar::sendDataInHeaders", "doc": "&quot;Sends the data through the HTTP headers&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_stackData", "name": "Debugbar::stackData", "doc": "&quot;Stacks the data in the session for later rendering&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_hasStackedData", "name": "Debugbar::hasStackedData", "doc": "&quot;Checks if there is stacked data in the session&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_getStackedData", "name": "Debugbar::getStackedData", "doc": "&quot;Returns the data stacked in the session&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_setStackDataSessionNamespace", "name": "Debugbar::setStackDataSessionNamespace", "doc": "&quot;Sets the key to use in the $_SESSION array&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_getStackDataSessionNamespace", "name": "Debugbar::getStackDataSessionNamespace", "doc": "&quot;Returns the key used in the $_SESSION array&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_setStackAlwaysUseSessionStorage", "name": "Debugbar::setStackAlwaysUseSessionStorage", "doc": "&quot;Sets whether to only use the session to store stacked data even\nif a storage is enabled&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_isStackAlwaysUseSessionStorage", "name": "Debugbar::isStackAlwaysUseSessionStorage", "doc": "&quot;Checks if the session is always used to store stacked data\neven if a storage is enabled&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_offsetSet", "name": "Debugbar::offsetSet", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_offsetGet", "name": "Debugbar::offsetGet", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_offsetExists", "name": "Debugbar::offsetExists", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Debugbar", "fromLink": "Debugbar.html", "link": "Debugbar.html#method_offsetUnset", "name": "Debugbar::offsetUnset", "doc": "&quot;&quot;"},
            
            {"type": "Class",  "link": "Eloquent.html", "name": "Eloquent", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_withGlobalScope", "name": "Eloquent::withGlobalScope", "doc": "&quot;Register a new global scope.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_withoutGlobalScope", "name": "Eloquent::withoutGlobalScope", "doc": "&quot;Remove a registered global scope.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_withoutGlobalScopes", "name": "Eloquent::withoutGlobalScopes", "doc": "&quot;Remove all or passed registered global scopes.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_removedScopes", "name": "Eloquent::removedScopes", "doc": "&quot;Get an array of global scopes that were removed from the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_find", "name": "Eloquent::find", "doc": "&quot;Find a model by its primary key.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_findMany", "name": "Eloquent::findMany", "doc": "&quot;Find multiple models by their primary keys.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_findOrFail", "name": "Eloquent::findOrFail", "doc": "&quot;Find a model by its primary key or throw an exception.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_findOrNew", "name": "Eloquent::findOrNew", "doc": "&quot;Find a model by its primary key or return fresh model instance.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_firstOrNew", "name": "Eloquent::firstOrNew", "doc": "&quot;Get the first record matching the attributes or instantiate it.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_firstOrCreate", "name": "Eloquent::firstOrCreate", "doc": "&quot;Get the first record matching the attributes or create it.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_updateOrCreate", "name": "Eloquent::updateOrCreate", "doc": "&quot;Create or update a record matching the attributes, and fill it with values.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_first", "name": "Eloquent::first", "doc": "&quot;Execute the query and get the first result.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_firstOrFail", "name": "Eloquent::firstOrFail", "doc": "&quot;Execute the query and get the first result or throw an exception.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_get", "name": "Eloquent::get", "doc": "&quot;Execute the query as a \&quot;select\&quot; statement.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_value", "name": "Eloquent::value", "doc": "&quot;Get a single column&#039;s value from the first result of a query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_cursor", "name": "Eloquent::cursor", "doc": "&quot;Get a generator for the given query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_chunk", "name": "Eloquent::chunk", "doc": "&quot;Chunk the results of the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_chunkById", "name": "Eloquent::chunkById", "doc": "&quot;Chunk the results of a query by comparing numeric IDs.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_each", "name": "Eloquent::each", "doc": "&quot;Execute a callback over each item while chunking.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_pluck", "name": "Eloquent::pluck", "doc": "&quot;Get an array with the values of a given column.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_paginate", "name": "Eloquent::paginate", "doc": "&quot;Paginate the given query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_simplePaginate", "name": "Eloquent::simplePaginate", "doc": "&quot;Paginate the given query into a simple paginator.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_onDelete", "name": "Eloquent::onDelete", "doc": "&quot;Register a replacement for the default delete function.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_getModels", "name": "Eloquent::getModels", "doc": "&quot;Get the hydrated models without eager loading.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_eagerLoadRelations", "name": "Eloquent::eagerLoadRelations", "doc": "&quot;Eager load the relationships for the models.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_when", "name": "Eloquent::when", "doc": "&quot;Apply the callback&#039;s query changes if the given \&quot;value\&quot; is true.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_where", "name": "Eloquent::where", "doc": "&quot;Add a basic where clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_orWhere", "name": "Eloquent::orWhere", "doc": "&quot;Add an \&quot;or where\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_has", "name": "Eloquent::has", "doc": "&quot;Add a relationship count \/ exists condition to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_doesntHave", "name": "Eloquent::doesntHave", "doc": "&quot;Add a relationship count \/ exists condition to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_whereHas", "name": "Eloquent::whereHas", "doc": "&quot;Add a relationship count \/ exists condition to the query with where clauses.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_whereDoesntHave", "name": "Eloquent::whereDoesntHave", "doc": "&quot;Add a relationship count \/ exists condition to the query with where clauses.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_orHas", "name": "Eloquent::orHas", "doc": "&quot;Add a relationship count \/ exists condition to the query with an \&quot;or\&quot;.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_orWhereHas", "name": "Eloquent::orWhereHas", "doc": "&quot;Add a relationship count \/ exists condition to the query with where clauses and an \&quot;or\&quot;.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_mergeModelDefinedRelationConstraints", "name": "Eloquent::mergeModelDefinedRelationConstraints", "doc": "&quot;Merge the constraints from a relation query to the current query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_without", "name": "Eloquent::without", "doc": "&quot;Prevent the specified relations from being eager loaded.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_withCount", "name": "Eloquent::withCount", "doc": "&quot;Add subselect queries to count the relations.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_scopes", "name": "Eloquent::scopes", "doc": "&quot;Add the given scopes to the current builder instance.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_applyScopes", "name": "Eloquent::applyScopes", "doc": "&quot;Apply the scopes to the Eloquent builder instance and return it.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_getQuery", "name": "Eloquent::getQuery", "doc": "&quot;Get the underlying query builder instance.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_toBase", "name": "Eloquent::toBase", "doc": "&quot;Get a base query builder instance.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_setQuery", "name": "Eloquent::setQuery", "doc": "&quot;Set the underlying query builder instance.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_getEagerLoads", "name": "Eloquent::getEagerLoads", "doc": "&quot;Get the relationships being eagerly loaded.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_setEagerLoads", "name": "Eloquent::setEagerLoads", "doc": "&quot;Set the relationships being eagerly loaded.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_getModel", "name": "Eloquent::getModel", "doc": "&quot;Get the model instance being queried.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_setModel", "name": "Eloquent::setModel", "doc": "&quot;Set a model instance for the model being queried.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_macro", "name": "Eloquent::macro", "doc": "&quot;Extend the builder with a given callback.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_getMacro", "name": "Eloquent::getMacro", "doc": "&quot;Get the given macro by name.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_select", "name": "Eloquent::select", "doc": "&quot;Set the columns to be selected.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_selectRaw", "name": "Eloquent::selectRaw", "doc": "&quot;Add a new \&quot;raw\&quot; select expression to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_selectSub", "name": "Eloquent::selectSub", "doc": "&quot;Add a subselect expression to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_addSelect", "name": "Eloquent::addSelect", "doc": "&quot;Add a new select column to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_distinct", "name": "Eloquent::distinct", "doc": "&quot;Force the query to only return distinct results.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_from", "name": "Eloquent::from", "doc": "&quot;Set the table which the query is targeting.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_join", "name": "Eloquent::join", "doc": "&quot;Add a join clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_joinWhere", "name": "Eloquent::joinWhere", "doc": "&quot;Add a \&quot;join where\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_leftJoin", "name": "Eloquent::leftJoin", "doc": "&quot;Add a left join to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_leftJoinWhere", "name": "Eloquent::leftJoinWhere", "doc": "&quot;Add a \&quot;join where\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_rightJoin", "name": "Eloquent::rightJoin", "doc": "&quot;Add a right join to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_rightJoinWhere", "name": "Eloquent::rightJoinWhere", "doc": "&quot;Add a \&quot;right join where\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_crossJoin", "name": "Eloquent::crossJoin", "doc": "&quot;Add a \&quot;cross join\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_whereColumn", "name": "Eloquent::whereColumn", "doc": "&quot;Add a \&quot;where\&quot; clause comparing two columns to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_orWhereColumn", "name": "Eloquent::orWhereColumn", "doc": "&quot;Add an \&quot;or where\&quot; clause comparing two columns to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_whereRaw", "name": "Eloquent::whereRaw", "doc": "&quot;Add a raw where clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_orWhereRaw", "name": "Eloquent::orWhereRaw", "doc": "&quot;Add a raw or where clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_whereBetween", "name": "Eloquent::whereBetween", "doc": "&quot;Add a where between statement to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_orWhereBetween", "name": "Eloquent::orWhereBetween", "doc": "&quot;Add an or where between statement to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_whereNotBetween", "name": "Eloquent::whereNotBetween", "doc": "&quot;Add a where not between statement to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_orWhereNotBetween", "name": "Eloquent::orWhereNotBetween", "doc": "&quot;Add an or where not between statement to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_whereNested", "name": "Eloquent::whereNested", "doc": "&quot;Add a nested where statement to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_forNestedWhere", "name": "Eloquent::forNestedWhere", "doc": "&quot;Create a new query instance for nested where condition.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_addNestedWhereQuery", "name": "Eloquent::addNestedWhereQuery", "doc": "&quot;Add another query builder as a nested where to the query builder.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_whereExists", "name": "Eloquent::whereExists", "doc": "&quot;Add an exists clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_orWhereExists", "name": "Eloquent::orWhereExists", "doc": "&quot;Add an or exists clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_whereNotExists", "name": "Eloquent::whereNotExists", "doc": "&quot;Add a where not exists clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_orWhereNotExists", "name": "Eloquent::orWhereNotExists", "doc": "&quot;Add a where not exists clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_addWhereExistsQuery", "name": "Eloquent::addWhereExistsQuery", "doc": "&quot;Add an exists clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_whereIn", "name": "Eloquent::whereIn", "doc": "&quot;Add a \&quot;where in\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_orWhereIn", "name": "Eloquent::orWhereIn", "doc": "&quot;Add an \&quot;or where in\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_whereNotIn", "name": "Eloquent::whereNotIn", "doc": "&quot;Add a \&quot;where not in\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_orWhereNotIn", "name": "Eloquent::orWhereNotIn", "doc": "&quot;Add an \&quot;or where not in\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_whereNull", "name": "Eloquent::whereNull", "doc": "&quot;Add a \&quot;where null\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_orWhereNull", "name": "Eloquent::orWhereNull", "doc": "&quot;Add an \&quot;or where null\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_whereNotNull", "name": "Eloquent::whereNotNull", "doc": "&quot;Add a \&quot;where not null\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_orWhereNotNull", "name": "Eloquent::orWhereNotNull", "doc": "&quot;Add an \&quot;or where not null\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_whereDate", "name": "Eloquent::whereDate", "doc": "&quot;Add a \&quot;where date\&quot; statement to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_orWhereDate", "name": "Eloquent::orWhereDate", "doc": "&quot;Add an \&quot;or where date\&quot; statement to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_whereTime", "name": "Eloquent::whereTime", "doc": "&quot;Add a \&quot;where time\&quot; statement to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_orWhereTime", "name": "Eloquent::orWhereTime", "doc": "&quot;Add an \&quot;or where time\&quot; statement to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_whereDay", "name": "Eloquent::whereDay", "doc": "&quot;Add a \&quot;where day\&quot; statement to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_whereMonth", "name": "Eloquent::whereMonth", "doc": "&quot;Add a \&quot;where month\&quot; statement to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_whereYear", "name": "Eloquent::whereYear", "doc": "&quot;Add a \&quot;where year\&quot; statement to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_dynamicWhere", "name": "Eloquent::dynamicWhere", "doc": "&quot;Handles dynamic \&quot;where\&quot; clauses to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_groupBy", "name": "Eloquent::groupBy", "doc": "&quot;Add a \&quot;group by\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_having", "name": "Eloquent::having", "doc": "&quot;Add a \&quot;having\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_orHaving", "name": "Eloquent::orHaving", "doc": "&quot;Add a \&quot;or having\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_havingRaw", "name": "Eloquent::havingRaw", "doc": "&quot;Add a raw having clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_orHavingRaw", "name": "Eloquent::orHavingRaw", "doc": "&quot;Add a raw or having clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_orderBy", "name": "Eloquent::orderBy", "doc": "&quot;Add an \&quot;order by\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_latest", "name": "Eloquent::latest", "doc": "&quot;Add an \&quot;order by\&quot; clause for a timestamp to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_oldest", "name": "Eloquent::oldest", "doc": "&quot;Add an \&quot;order by\&quot; clause for a timestamp to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_inRandomOrder", "name": "Eloquent::inRandomOrder", "doc": "&quot;Put the query&#039;s results in random order.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_orderByRaw", "name": "Eloquent::orderByRaw", "doc": "&quot;Add a raw \&quot;order by\&quot; clause to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_offset", "name": "Eloquent::offset", "doc": "&quot;Set the \&quot;offset\&quot; value of the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_skip", "name": "Eloquent::skip", "doc": "&quot;Alias to set the \&quot;offset\&quot; value of the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_limit", "name": "Eloquent::limit", "doc": "&quot;Set the \&quot;limit\&quot; value of the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_take", "name": "Eloquent::take", "doc": "&quot;Alias to set the \&quot;limit\&quot; value of the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_forPage", "name": "Eloquent::forPage", "doc": "&quot;Set the limit and offset for a given page.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_forPageAfterId", "name": "Eloquent::forPageAfterId", "doc": "&quot;Constrain the query to the next \&quot;page\&quot; of results after a given ID.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_union", "name": "Eloquent::union", "doc": "&quot;Add a union statement to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_unionAll", "name": "Eloquent::unionAll", "doc": "&quot;Add a union all statement to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_lock", "name": "Eloquent::lock", "doc": "&quot;Lock the selected rows in the table.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_lockForUpdate", "name": "Eloquent::lockForUpdate", "doc": "&quot;Lock the selected rows in the table for updating.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_sharedLock", "name": "Eloquent::sharedLock", "doc": "&quot;Share lock the selected rows in the table.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_toSql", "name": "Eloquent::toSql", "doc": "&quot;Get the SQL representation of the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_getCountForPagination", "name": "Eloquent::getCountForPagination", "doc": "&quot;Get the count of the total records for the paginator.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_implode", "name": "Eloquent::implode", "doc": "&quot;Concatenate values of a given column as a string.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_exists", "name": "Eloquent::exists", "doc": "&quot;Determine if any rows exist for the current query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_count", "name": "Eloquent::count", "doc": "&quot;Retrieve the \&quot;count\&quot; result of the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_min", "name": "Eloquent::min", "doc": "&quot;Retrieve the minimum value of a given column.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_max", "name": "Eloquent::max", "doc": "&quot;Retrieve the maximum value of a given column.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_sum", "name": "Eloquent::sum", "doc": "&quot;Retrieve the sum of the values of a given column.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_avg", "name": "Eloquent::avg", "doc": "&quot;Retrieve the average of the values of a given column.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_average", "name": "Eloquent::average", "doc": "&quot;Alias for the \&quot;avg\&quot; method.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_aggregate", "name": "Eloquent::aggregate", "doc": "&quot;Execute an aggregate function on the database.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_numericAggregate", "name": "Eloquent::numericAggregate", "doc": "&quot;Execute a numeric aggregate function on the database.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_insert", "name": "Eloquent::insert", "doc": "&quot;Insert a new record into the database.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_insertGetId", "name": "Eloquent::insertGetId", "doc": "&quot;Insert a new record and get the value of the primary key.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_updateOrInsert", "name": "Eloquent::updateOrInsert", "doc": "&quot;Insert or update a record matching the attributes, and fill it with values.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_truncate", "name": "Eloquent::truncate", "doc": "&quot;Run a truncate statement on the table.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_mergeWheres", "name": "Eloquent::mergeWheres", "doc": "&quot;Merge an array of where clauses and bindings.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_raw", "name": "Eloquent::raw", "doc": "&quot;Create a raw database expression.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_getBindings", "name": "Eloquent::getBindings", "doc": "&quot;Get the current query value bindings in a flattened array.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_getRawBindings", "name": "Eloquent::getRawBindings", "doc": "&quot;Get the raw array of bindings.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_setBindings", "name": "Eloquent::setBindings", "doc": "&quot;Set the bindings on the query builder.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_addBinding", "name": "Eloquent::addBinding", "doc": "&quot;Add a binding to the query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_mergeBindings", "name": "Eloquent::mergeBindings", "doc": "&quot;Merge an array of bindings into our bindings.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_getProcessor", "name": "Eloquent::getProcessor", "doc": "&quot;Get the database query processor instance.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_getGrammar", "name": "Eloquent::getGrammar", "doc": "&quot;Get the query grammar instance.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_useWritePdo", "name": "Eloquent::useWritePdo", "doc": "&quot;Use the write pdo for query.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_hasMacro", "name": "Eloquent::hasMacro", "doc": "&quot;Checks if macro is registered.&quot;"},
                    {"type": "Method", "fromName": "Eloquent", "fromLink": "Eloquent.html", "link": "Eloquent.html#method_macroCall", "name": "Eloquent::macroCall", "doc": "&quot;Dynamically handle calls to the class.&quot;"},
            
            {"type": "Class",  "link": "Event.html", "name": "Event", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Event", "fromLink": "Event.html", "link": "Event.html#method_listen", "name": "Event::listen", "doc": "&quot;Register an event listener with the dispatcher.&quot;"},
                    {"type": "Method", "fromName": "Event", "fromLink": "Event.html", "link": "Event.html#method_hasListeners", "name": "Event::hasListeners", "doc": "&quot;Determine if a given event has listeners.&quot;"},
                    {"type": "Method", "fromName": "Event", "fromLink": "Event.html", "link": "Event.html#method_push", "name": "Event::push", "doc": "&quot;Register an event and payload to be fired later.&quot;"},
                    {"type": "Method", "fromName": "Event", "fromLink": "Event.html", "link": "Event.html#method_subscribe", "name": "Event::subscribe", "doc": "&quot;Register an event subscriber with the dispatcher.&quot;"},
                    {"type": "Method", "fromName": "Event", "fromLink": "Event.html", "link": "Event.html#method_until", "name": "Event::until", "doc": "&quot;Fire an event until the first non-null response is returned.&quot;"},
                    {"type": "Method", "fromName": "Event", "fromLink": "Event.html", "link": "Event.html#method_flush", "name": "Event::flush", "doc": "&quot;Flush a set of pushed events.&quot;"},
                    {"type": "Method", "fromName": "Event", "fromLink": "Event.html", "link": "Event.html#method_firing", "name": "Event::firing", "doc": "&quot;Get the event that is currently firing.&quot;"},
                    {"type": "Method", "fromName": "Event", "fromLink": "Event.html", "link": "Event.html#method_fire", "name": "Event::fire", "doc": "&quot;Fire an event and call the listeners.&quot;"},
                    {"type": "Method", "fromName": "Event", "fromLink": "Event.html", "link": "Event.html#method_getListeners", "name": "Event::getListeners", "doc": "&quot;Get all of the listeners for a given event name.&quot;"},
                    {"type": "Method", "fromName": "Event", "fromLink": "Event.html", "link": "Event.html#method_makeListener", "name": "Event::makeListener", "doc": "&quot;Register an event listener with the dispatcher.&quot;"},
                    {"type": "Method", "fromName": "Event", "fromLink": "Event.html", "link": "Event.html#method_createClassListener", "name": "Event::createClassListener", "doc": "&quot;Create a class based listener using the IoC container.&quot;"},
                    {"type": "Method", "fromName": "Event", "fromLink": "Event.html", "link": "Event.html#method_forget", "name": "Event::forget", "doc": "&quot;Remove a set of listeners from the dispatcher.&quot;"},
                    {"type": "Method", "fromName": "Event", "fromLink": "Event.html", "link": "Event.html#method_forgetPushed", "name": "Event::forgetPushed", "doc": "&quot;Forget all of the pushed listeners.&quot;"},
                    {"type": "Method", "fromName": "Event", "fromLink": "Event.html", "link": "Event.html#method_setQueueResolver", "name": "Event::setQueueResolver", "doc": "&quot;Set the queue resolver implementation.&quot;"},
            
            {"type": "Class",  "link": "File.html", "name": "File", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_exists", "name": "File::exists", "doc": "&quot;Determine if a file or directory exists.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_get", "name": "File::get", "doc": "&quot;Get the contents of a file.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_sharedGet", "name": "File::sharedGet", "doc": "&quot;Get contents of a file with shared access.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_getRequire", "name": "File::getRequire", "doc": "&quot;Get the returned value of a file.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_requireOnce", "name": "File::requireOnce", "doc": "&quot;Require the given file once.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_put", "name": "File::put", "doc": "&quot;Write the contents of a file.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_prepend", "name": "File::prepend", "doc": "&quot;Prepend to a file.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_append", "name": "File::append", "doc": "&quot;Append to a file.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_delete", "name": "File::delete", "doc": "&quot;Delete the file at a given path.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_move", "name": "File::move", "doc": "&quot;Move a file to a new location.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_copy", "name": "File::copy", "doc": "&quot;Copy a file to a new location.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_link", "name": "File::link", "doc": "&quot;Create a hard link to the target file or directory.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_name", "name": "File::name", "doc": "&quot;Extract the file name from a file path.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_basename", "name": "File::basename", "doc": "&quot;Extract the trailing name component from a file path.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_dirname", "name": "File::dirname", "doc": "&quot;Extract the parent directory from a file path.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_extension", "name": "File::extension", "doc": "&quot;Extract the file extension from a file path.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_type", "name": "File::type", "doc": "&quot;Get the file type of a given file.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_mimeType", "name": "File::mimeType", "doc": "&quot;Get the mime-type of a given file.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_size", "name": "File::size", "doc": "&quot;Get the file size of a given file.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_lastModified", "name": "File::lastModified", "doc": "&quot;Get the file&#039;s last modification time.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_isDirectory", "name": "File::isDirectory", "doc": "&quot;Determine if the given path is a directory.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_isReadable", "name": "File::isReadable", "doc": "&quot;Determine if the given path is readable.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_isWritable", "name": "File::isWritable", "doc": "&quot;Determine if the given path is writable.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_isFile", "name": "File::isFile", "doc": "&quot;Determine if the given path is a file.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_glob", "name": "File::glob", "doc": "&quot;Find path names matching a given pattern.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_files", "name": "File::files", "doc": "&quot;Get an array of all files in a directory.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_allFiles", "name": "File::allFiles", "doc": "&quot;Get all of the files from the given directory (recursive).&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_directories", "name": "File::directories", "doc": "&quot;Get all of the directories within a given directory.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_makeDirectory", "name": "File::makeDirectory", "doc": "&quot;Create a directory.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_moveDirectory", "name": "File::moveDirectory", "doc": "&quot;Move a directory.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_copyDirectory", "name": "File::copyDirectory", "doc": "&quot;Copy a directory from one location to another.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_deleteDirectory", "name": "File::deleteDirectory", "doc": "&quot;Recursively delete a directory.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_cleanDirectory", "name": "File::cleanDirectory", "doc": "&quot;Empty the specified directory of all files and folders.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_macro", "name": "File::macro", "doc": "&quot;Register a custom macro.&quot;"},
                    {"type": "Method", "fromName": "File", "fromLink": "File.html", "link": "File.html#method_hasMacro", "name": "File::hasMacro", "doc": "&quot;Checks if macro is registered.&quot;"},
            
            {"type": "Class",  "link": "Gate.html", "name": "Gate", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Gate", "fromLink": "Gate.html", "link": "Gate.html#method_has", "name": "Gate::has", "doc": "&quot;Determine if a given ability has been defined.&quot;"},
                    {"type": "Method", "fromName": "Gate", "fromLink": "Gate.html", "link": "Gate.html#method_define", "name": "Gate::define", "doc": "&quot;Define a new ability.&quot;"},
                    {"type": "Method", "fromName": "Gate", "fromLink": "Gate.html", "link": "Gate.html#method_policy", "name": "Gate::policy", "doc": "&quot;Define a policy class for a given class type.&quot;"},
                    {"type": "Method", "fromName": "Gate", "fromLink": "Gate.html", "link": "Gate.html#method_before", "name": "Gate::before", "doc": "&quot;Register a callback to run before all Gate checks.&quot;"},
                    {"type": "Method", "fromName": "Gate", "fromLink": "Gate.html", "link": "Gate.html#method_after", "name": "Gate::after", "doc": "&quot;Register a callback to run after all Gate checks.&quot;"},
                    {"type": "Method", "fromName": "Gate", "fromLink": "Gate.html", "link": "Gate.html#method_allows", "name": "Gate::allows", "doc": "&quot;Determine if the given ability should be granted for the current user.&quot;"},
                    {"type": "Method", "fromName": "Gate", "fromLink": "Gate.html", "link": "Gate.html#method_denies", "name": "Gate::denies", "doc": "&quot;Determine if the given ability should be denied for the current user.&quot;"},
                    {"type": "Method", "fromName": "Gate", "fromLink": "Gate.html", "link": "Gate.html#method_check", "name": "Gate::check", "doc": "&quot;Determine if the given ability should be granted for the current user.&quot;"},
                    {"type": "Method", "fromName": "Gate", "fromLink": "Gate.html", "link": "Gate.html#method_authorize", "name": "Gate::authorize", "doc": "&quot;Determine if the given ability should be granted for the current user.&quot;"},
                    {"type": "Method", "fromName": "Gate", "fromLink": "Gate.html", "link": "Gate.html#method_getPolicyFor", "name": "Gate::getPolicyFor", "doc": "&quot;Get a policy instance for a given class.&quot;"},
                    {"type": "Method", "fromName": "Gate", "fromLink": "Gate.html", "link": "Gate.html#method_resolvePolicy", "name": "Gate::resolvePolicy", "doc": "&quot;Build a policy class instance of the given type.&quot;"},
                    {"type": "Method", "fromName": "Gate", "fromLink": "Gate.html", "link": "Gate.html#method_forUser", "name": "Gate::forUser", "doc": "&quot;Get a gate instance for the given user.&quot;"},
            
            {"type": "Class",  "link": "Hash.html", "name": "Hash", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Hash", "fromLink": "Hash.html", "link": "Hash.html#method_make", "name": "Hash::make", "doc": "&quot;Hash the given value.&quot;"},
                    {"type": "Method", "fromName": "Hash", "fromLink": "Hash.html", "link": "Hash.html#method_check", "name": "Hash::check", "doc": "&quot;Check the given plain value against a hash.&quot;"},
                    {"type": "Method", "fromName": "Hash", "fromLink": "Hash.html", "link": "Hash.html#method_needsRehash", "name": "Hash::needsRehash", "doc": "&quot;Check if the given hash has been hashed using the given options.&quot;"},
                    {"type": "Method", "fromName": "Hash", "fromLink": "Hash.html", "link": "Hash.html#method_setRounds", "name": "Hash::setRounds", "doc": "&quot;Set the default password work factor.&quot;"},
            
            {"type": "Class",  "link": "Lang.html", "name": "Lang", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Lang", "fromLink": "Lang.html", "link": "Lang.html#method_hasForLocale", "name": "Lang::hasForLocale", "doc": "&quot;Determine if a translation exists for a given locale.&quot;"},
                    {"type": "Method", "fromName": "Lang", "fromLink": "Lang.html", "link": "Lang.html#method_has", "name": "Lang::has", "doc": "&quot;Determine if a translation exists.&quot;"},
                    {"type": "Method", "fromName": "Lang", "fromLink": "Lang.html", "link": "Lang.html#method_get", "name": "Lang::get", "doc": "&quot;Get the translation for the given key.&quot;"},
                    {"type": "Method", "fromName": "Lang", "fromLink": "Lang.html", "link": "Lang.html#method_addLines", "name": "Lang::addLines", "doc": "&quot;Add translation lines to the given locale.&quot;"},
                    {"type": "Method", "fromName": "Lang", "fromLink": "Lang.html", "link": "Lang.html#method_choice", "name": "Lang::choice", "doc": "&quot;Get a translation according to an integer value.&quot;"},
                    {"type": "Method", "fromName": "Lang", "fromLink": "Lang.html", "link": "Lang.html#method_trans", "name": "Lang::trans", "doc": "&quot;Get the translation for a given key.&quot;"},
                    {"type": "Method", "fromName": "Lang", "fromLink": "Lang.html", "link": "Lang.html#method_transChoice", "name": "Lang::transChoice", "doc": "&quot;Get a translation according to an integer value.&quot;"},
                    {"type": "Method", "fromName": "Lang", "fromLink": "Lang.html", "link": "Lang.html#method_load", "name": "Lang::load", "doc": "&quot;Load the specified language group.&quot;"},
                    {"type": "Method", "fromName": "Lang", "fromLink": "Lang.html", "link": "Lang.html#method_addNamespace", "name": "Lang::addNamespace", "doc": "&quot;Add a new namespace to the loader.&quot;"},
                    {"type": "Method", "fromName": "Lang", "fromLink": "Lang.html", "link": "Lang.html#method_parseKey", "name": "Lang::parseKey", "doc": "&quot;Parse a key into namespace, group, and item.&quot;"},
                    {"type": "Method", "fromName": "Lang", "fromLink": "Lang.html", "link": "Lang.html#method_getSelector", "name": "Lang::getSelector", "doc": "&quot;Get the message selector instance.&quot;"},
                    {"type": "Method", "fromName": "Lang", "fromLink": "Lang.html", "link": "Lang.html#method_setSelector", "name": "Lang::setSelector", "doc": "&quot;Set the message selector instance.&quot;"},
                    {"type": "Method", "fromName": "Lang", "fromLink": "Lang.html", "link": "Lang.html#method_getLoader", "name": "Lang::getLoader", "doc": "&quot;Get the language line loader implementation.&quot;"},
                    {"type": "Method", "fromName": "Lang", "fromLink": "Lang.html", "link": "Lang.html#method_locale", "name": "Lang::locale", "doc": "&quot;Get the default locale being used.&quot;"},
                    {"type": "Method", "fromName": "Lang", "fromLink": "Lang.html", "link": "Lang.html#method_getLocale", "name": "Lang::getLocale", "doc": "&quot;Get the default locale being used.&quot;"},
                    {"type": "Method", "fromName": "Lang", "fromLink": "Lang.html", "link": "Lang.html#method_setLocale", "name": "Lang::setLocale", "doc": "&quot;Set the default locale.&quot;"},
                    {"type": "Method", "fromName": "Lang", "fromLink": "Lang.html", "link": "Lang.html#method_getFallback", "name": "Lang::getFallback", "doc": "&quot;Get the fallback locale being used.&quot;"},
                    {"type": "Method", "fromName": "Lang", "fromLink": "Lang.html", "link": "Lang.html#method_setFallback", "name": "Lang::setFallback", "doc": "&quot;Set the fallback locale being used.&quot;"},
                    {"type": "Method", "fromName": "Lang", "fromLink": "Lang.html", "link": "Lang.html#method_setParsedKey", "name": "Lang::setParsedKey", "doc": "&quot;Set the parsed value of a key.&quot;"},
                    {"type": "Method", "fromName": "Lang", "fromLink": "Lang.html", "link": "Lang.html#method_macro", "name": "Lang::macro", "doc": "&quot;Register a custom macro.&quot;"},
                    {"type": "Method", "fromName": "Lang", "fromLink": "Lang.html", "link": "Lang.html#method_hasMacro", "name": "Lang::hasMacro", "doc": "&quot;Checks if macro is registered.&quot;"},
            
            {"type": "Class",  "link": "Log.html", "name": "Log", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Log", "fromLink": "Log.html", "link": "Log.html#method_debug", "name": "Log::debug", "doc": "&quot;Adds a log record at the DEBUG level.&quot;"},
                    {"type": "Method", "fromName": "Log", "fromLink": "Log.html", "link": "Log.html#method_info", "name": "Log::info", "doc": "&quot;Adds a log record at the INFO level.&quot;"},
                    {"type": "Method", "fromName": "Log", "fromLink": "Log.html", "link": "Log.html#method_notice", "name": "Log::notice", "doc": "&quot;Adds a log record at the NOTICE level.&quot;"},
                    {"type": "Method", "fromName": "Log", "fromLink": "Log.html", "link": "Log.html#method_warning", "name": "Log::warning", "doc": "&quot;Adds a log record at the WARNING level.&quot;"},
                    {"type": "Method", "fromName": "Log", "fromLink": "Log.html", "link": "Log.html#method_error", "name": "Log::error", "doc": "&quot;Adds a log record at the ERROR level.&quot;"},
                    {"type": "Method", "fromName": "Log", "fromLink": "Log.html", "link": "Log.html#method_critical", "name": "Log::critical", "doc": "&quot;Adds a log record at the CRITICAL level.&quot;"},
                    {"type": "Method", "fromName": "Log", "fromLink": "Log.html", "link": "Log.html#method_alert", "name": "Log::alert", "doc": "&quot;Adds a log record at the ALERT level.&quot;"},
                    {"type": "Method", "fromName": "Log", "fromLink": "Log.html", "link": "Log.html#method_emergency", "name": "Log::emergency", "doc": "&quot;Adds a log record at the EMERGENCY level.&quot;"},
                    {"type": "Method", "fromName": "Log", "fromLink": "Log.html", "link": "Log.html#method_log", "name": "Log::log", "doc": "&quot;Log a message to the logs.&quot;"},
                    {"type": "Method", "fromName": "Log", "fromLink": "Log.html", "link": "Log.html#method_write", "name": "Log::write", "doc": "&quot;Dynamically pass log calls into the writer.&quot;"},
                    {"type": "Method", "fromName": "Log", "fromLink": "Log.html", "link": "Log.html#method_useFiles", "name": "Log::useFiles", "doc": "&quot;Register a file log handler.&quot;"},
                    {"type": "Method", "fromName": "Log", "fromLink": "Log.html", "link": "Log.html#method_useDailyFiles", "name": "Log::useDailyFiles", "doc": "&quot;Register a daily file log handler.&quot;"},
                    {"type": "Method", "fromName": "Log", "fromLink": "Log.html", "link": "Log.html#method_useSyslog", "name": "Log::useSyslog", "doc": "&quot;Register a Syslog handler.&quot;"},
                    {"type": "Method", "fromName": "Log", "fromLink": "Log.html", "link": "Log.html#method_useErrorLog", "name": "Log::useErrorLog", "doc": "&quot;Register an error_log handler.&quot;"},
                    {"type": "Method", "fromName": "Log", "fromLink": "Log.html", "link": "Log.html#method_listen", "name": "Log::listen", "doc": "&quot;Register a new callback handler for when a log event is triggered.&quot;"},
                    {"type": "Method", "fromName": "Log", "fromLink": "Log.html", "link": "Log.html#method_getMonolog", "name": "Log::getMonolog", "doc": "&quot;Get the underlying Monolog instance.&quot;"},
                    {"type": "Method", "fromName": "Log", "fromLink": "Log.html", "link": "Log.html#method_getEventDispatcher", "name": "Log::getEventDispatcher", "doc": "&quot;Get the event dispatcher instance.&quot;"},
                    {"type": "Method", "fromName": "Log", "fromLink": "Log.html", "link": "Log.html#method_setEventDispatcher", "name": "Log::setEventDispatcher", "doc": "&quot;Set the event dispatcher instance.&quot;"},
            
            {"type": "Class",  "link": "Mail.html", "name": "Mail", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Mail", "fromLink": "Mail.html", "link": "Mail.html#method_alwaysFrom", "name": "Mail::alwaysFrom", "doc": "&quot;Set the global from address and name.&quot;"},
                    {"type": "Method", "fromName": "Mail", "fromLink": "Mail.html", "link": "Mail.html#method_alwaysTo", "name": "Mail::alwaysTo", "doc": "&quot;Set the global to address and name.&quot;"},
                    {"type": "Method", "fromName": "Mail", "fromLink": "Mail.html", "link": "Mail.html#method_to", "name": "Mail::to", "doc": "&quot;Begin the process of mailing a mailable class instance.&quot;"},
                    {"type": "Method", "fromName": "Mail", "fromLink": "Mail.html", "link": "Mail.html#method_bcc", "name": "Mail::bcc", "doc": "&quot;Begin the process of mailing a mailable class instance.&quot;"},
                    {"type": "Method", "fromName": "Mail", "fromLink": "Mail.html", "link": "Mail.html#method_raw", "name": "Mail::raw", "doc": "&quot;Send a new message when only a raw text part.&quot;"},
                    {"type": "Method", "fromName": "Mail", "fromLink": "Mail.html", "link": "Mail.html#method_plain", "name": "Mail::plain", "doc": "&quot;Send a new message when only a plain part.&quot;"},
                    {"type": "Method", "fromName": "Mail", "fromLink": "Mail.html", "link": "Mail.html#method_send", "name": "Mail::send", "doc": "&quot;Send a new message using a view.&quot;"},
                    {"type": "Method", "fromName": "Mail", "fromLink": "Mail.html", "link": "Mail.html#method_queue", "name": "Mail::queue", "doc": "&quot;Queue a new e-mail message for sending.&quot;"},
                    {"type": "Method", "fromName": "Mail", "fromLink": "Mail.html", "link": "Mail.html#method_onQueue", "name": "Mail::onQueue", "doc": "&quot;Queue a new e-mail message for sending on the given queue.&quot;"},
                    {"type": "Method", "fromName": "Mail", "fromLink": "Mail.html", "link": "Mail.html#method_queueOn", "name": "Mail::queueOn", "doc": "&quot;Queue a new e-mail message for sending on the given queue.&quot;"},
                    {"type": "Method", "fromName": "Mail", "fromLink": "Mail.html", "link": "Mail.html#method_later", "name": "Mail::later", "doc": "&quot;Queue a new e-mail message for sending after (n) seconds.&quot;"},
                    {"type": "Method", "fromName": "Mail", "fromLink": "Mail.html", "link": "Mail.html#method_laterOn", "name": "Mail::laterOn", "doc": "&quot;Queue a new e-mail message for sending after (n) seconds on the given queue.&quot;"},
                    {"type": "Method", "fromName": "Mail", "fromLink": "Mail.html", "link": "Mail.html#method_getViewFactory", "name": "Mail::getViewFactory", "doc": "&quot;Get the view factory instance.&quot;"},
                    {"type": "Method", "fromName": "Mail", "fromLink": "Mail.html", "link": "Mail.html#method_getSwiftMailer", "name": "Mail::getSwiftMailer", "doc": "&quot;Get the Swift Mailer instance.&quot;"},
                    {"type": "Method", "fromName": "Mail", "fromLink": "Mail.html", "link": "Mail.html#method_failures", "name": "Mail::failures", "doc": "&quot;Get the array of failed recipients.&quot;"},
                    {"type": "Method", "fromName": "Mail", "fromLink": "Mail.html", "link": "Mail.html#method_setSwiftMailer", "name": "Mail::setSwiftMailer", "doc": "&quot;Set the Swift Mailer instance.&quot;"},
                    {"type": "Method", "fromName": "Mail", "fromLink": "Mail.html", "link": "Mail.html#method_setQueue", "name": "Mail::setQueue", "doc": "&quot;Set the queue manager instance.&quot;"},
                    {"type": "Method", "fromName": "Mail", "fromLink": "Mail.html", "link": "Mail.html#method_setContainer", "name": "Mail::setContainer", "doc": "&quot;Set the IoC container instance.&quot;"},
            
            {"type": "Class",  "link": "Notification.html", "name": "Notification", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Notification", "fromLink": "Notification.html", "link": "Notification.html#method_send", "name": "Notification::send", "doc": "&quot;Send the given notification to the given notifiable entities.&quot;"},
                    {"type": "Method", "fromName": "Notification", "fromLink": "Notification.html", "link": "Notification.html#method_sendNow", "name": "Notification::sendNow", "doc": "&quot;Send the given notification immediately.&quot;"},
                    {"type": "Method", "fromName": "Notification", "fromLink": "Notification.html", "link": "Notification.html#method_channel", "name": "Notification::channel", "doc": "&quot;Get a channel instance.&quot;"},
                    {"type": "Method", "fromName": "Notification", "fromLink": "Notification.html", "link": "Notification.html#method_getDefaultDriver", "name": "Notification::getDefaultDriver", "doc": "&quot;Get the default channel driver name.&quot;"},
                    {"type": "Method", "fromName": "Notification", "fromLink": "Notification.html", "link": "Notification.html#method_deliversVia", "name": "Notification::deliversVia", "doc": "&quot;Get the default channel driver name.&quot;"},
                    {"type": "Method", "fromName": "Notification", "fromLink": "Notification.html", "link": "Notification.html#method_deliverVia", "name": "Notification::deliverVia", "doc": "&quot;Set the default channel driver name.&quot;"},
                    {"type": "Method", "fromName": "Notification", "fromLink": "Notification.html", "link": "Notification.html#method_driver", "name": "Notification::driver", "doc": "&quot;Get a driver instance.&quot;"},
                    {"type": "Method", "fromName": "Notification", "fromLink": "Notification.html", "link": "Notification.html#method_extend", "name": "Notification::extend", "doc": "&quot;Register a custom driver creator Closure.&quot;"},
                    {"type": "Method", "fromName": "Notification", "fromLink": "Notification.html", "link": "Notification.html#method_getDrivers", "name": "Notification::getDrivers", "doc": "&quot;Get all of the created \&quot;drivers\&quot;.&quot;"},
            
            {"type": "Class",  "link": "Password.html", "name": "Password", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Password", "fromLink": "Password.html", "link": "Password.html#method_broker", "name": "Password::broker", "doc": "&quot;Attempt to get the broker from the local cache.&quot;"},
                    {"type": "Method", "fromName": "Password", "fromLink": "Password.html", "link": "Password.html#method_getDefaultDriver", "name": "Password::getDefaultDriver", "doc": "&quot;Get the default password broker name.&quot;"},
                    {"type": "Method", "fromName": "Password", "fromLink": "Password.html", "link": "Password.html#method_setDefaultDriver", "name": "Password::setDefaultDriver", "doc": "&quot;Set the default password broker name.&quot;"},
            
            {"type": "Class",  "link": "Queue.html", "name": "Queue", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_before", "name": "Queue::before", "doc": "&quot;Register an event listener for the before job event.&quot;"},
                    {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_after", "name": "Queue::after", "doc": "&quot;Register an event listener for the after job event.&quot;"},
                    {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_exceptionOccurred", "name": "Queue::exceptionOccurred", "doc": "&quot;Register an event listener for the exception occurred job event.&quot;"},
                    {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_looping", "name": "Queue::looping", "doc": "&quot;Register an event listener for the daemon queue loop.&quot;"},
                    {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_failing", "name": "Queue::failing", "doc": "&quot;Register an event listener for the failed job event.&quot;"},
                    {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_stopping", "name": "Queue::stopping", "doc": "&quot;Register an event listener for the daemon queue stopping.&quot;"},
                    {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_connected", "name": "Queue::connected", "doc": "&quot;Determine if the driver is connected.&quot;"},
                    {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_connection", "name": "Queue::connection", "doc": "&quot;Resolve a queue connection instance.&quot;"},
                    {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_extend", "name": "Queue::extend", "doc": "&quot;Add a queue connection resolver.&quot;"},
                    {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_addConnector", "name": "Queue::addConnector", "doc": "&quot;Add a queue connection resolver.&quot;"},
                    {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_getDefaultDriver", "name": "Queue::getDefaultDriver", "doc": "&quot;Get the name of the default queue connection.&quot;"},
                    {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_setDefaultDriver", "name": "Queue::setDefaultDriver", "doc": "&quot;Set the name of the default queue connection.&quot;"},
                    {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_getName", "name": "Queue::getName", "doc": "&quot;Get the full name for the given connection.&quot;"},
                    {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_isDownForMaintenance", "name": "Queue::isDownForMaintenance", "doc": "&quot;Determine if the application is in maintenance mode.&quot;"},
                    {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_size", "name": "Queue::size", "doc": "&quot;Get the size of the queue.&quot;"},
                    {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_push", "name": "Queue::push", "doc": "&quot;Push a new job onto the queue.&quot;"},
                    {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_pushRaw", "name": "Queue::pushRaw", "doc": "&quot;Push a raw payload onto the queue.&quot;"},
                    {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_later", "name": "Queue::later", "doc": "&quot;Push a new job onto the queue after a delay.&quot;"},
                    {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_pop", "name": "Queue::pop", "doc": "&quot;Pop the next job off of the queue.&quot;"},
                    {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_pushOn", "name": "Queue::pushOn", "doc": "&quot;Push a new job onto the queue.&quot;"},
                    {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_laterOn", "name": "Queue::laterOn", "doc": "&quot;Push a new job onto the queue after a delay.&quot;"},
                    {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_bulk", "name": "Queue::bulk", "doc": "&quot;Push an array of jobs onto the queue.&quot;"},
                    {"type": "Method", "fromName": "Queue", "fromLink": "Queue.html", "link": "Queue.html#method_setContainer", "name": "Queue::setContainer", "doc": "&quot;Set the IoC container instance.&quot;"},
            
            {"type": "Class",  "link": "Redirect.html", "name": "Redirect", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Redirect", "fromLink": "Redirect.html", "link": "Redirect.html#method_home", "name": "Redirect::home", "doc": "&quot;Create a new redirect response to the \&quot;home\&quot; route.&quot;"},
                    {"type": "Method", "fromName": "Redirect", "fromLink": "Redirect.html", "link": "Redirect.html#method_back", "name": "Redirect::back", "doc": "&quot;Create a new redirect response to the previous location.&quot;"},
                    {"type": "Method", "fromName": "Redirect", "fromLink": "Redirect.html", "link": "Redirect.html#method_refresh", "name": "Redirect::refresh", "doc": "&quot;Create a new redirect response to the current URI.&quot;"},
                    {"type": "Method", "fromName": "Redirect", "fromLink": "Redirect.html", "link": "Redirect.html#method_guest", "name": "Redirect::guest", "doc": "&quot;Create a new redirect response, while putting the current URL in the session.&quot;"},
                    {"type": "Method", "fromName": "Redirect", "fromLink": "Redirect.html", "link": "Redirect.html#method_intended", "name": "Redirect::intended", "doc": "&quot;Create a new redirect response to the previously intended location.&quot;"},
                    {"type": "Method", "fromName": "Redirect", "fromLink": "Redirect.html", "link": "Redirect.html#method_to", "name": "Redirect::to", "doc": "&quot;Create a new redirect response to the given path.&quot;"},
                    {"type": "Method", "fromName": "Redirect", "fromLink": "Redirect.html", "link": "Redirect.html#method_away", "name": "Redirect::away", "doc": "&quot;Create a new redirect response to an external URL (no validation).&quot;"},
                    {"type": "Method", "fromName": "Redirect", "fromLink": "Redirect.html", "link": "Redirect.html#method_secure", "name": "Redirect::secure", "doc": "&quot;Create a new redirect response to the given HTTPS path.&quot;"},
                    {"type": "Method", "fromName": "Redirect", "fromLink": "Redirect.html", "link": "Redirect.html#method_route", "name": "Redirect::route", "doc": "&quot;Create a new redirect response to a named route.&quot;"},
                    {"type": "Method", "fromName": "Redirect", "fromLink": "Redirect.html", "link": "Redirect.html#method_action", "name": "Redirect::action", "doc": "&quot;Create a new redirect response to a controller action.&quot;"},
                    {"type": "Method", "fromName": "Redirect", "fromLink": "Redirect.html", "link": "Redirect.html#method_getUrlGenerator", "name": "Redirect::getUrlGenerator", "doc": "&quot;Get the URL generator instance.&quot;"},
                    {"type": "Method", "fromName": "Redirect", "fromLink": "Redirect.html", "link": "Redirect.html#method_setSession", "name": "Redirect::setSession", "doc": "&quot;Set the active session store.&quot;"},
            
            {"type": "Class",  "link": "Request.html", "name": "Request", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_capture", "name": "Request::capture", "doc": "&quot;Create a new Illuminate HTTP request from server variables.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_instance", "name": "Request::instance", "doc": "&quot;Return the Request instance.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_method", "name": "Request::method", "doc": "&quot;Get the request method.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_root", "name": "Request::root", "doc": "&quot;Get the root URL for the application.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_url", "name": "Request::url", "doc": "&quot;Get the URL (no query string) for the request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_fullUrl", "name": "Request::fullUrl", "doc": "&quot;Get the full URL for the request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_fullUrlWithQuery", "name": "Request::fullUrlWithQuery", "doc": "&quot;Get the full URL for the request with the added query string parameters.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_path", "name": "Request::path", "doc": "&quot;Get the current path info for the request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_decodedPath", "name": "Request::decodedPath", "doc": "&quot;Get the current encoded path info for the request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_segment", "name": "Request::segment", "doc": "&quot;Get a segment from the URI (1 based index).&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_segments", "name": "Request::segments", "doc": "&quot;Get all of the segments for the request path.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_is", "name": "Request::is", "doc": "&quot;Determine if the current request URI matches a pattern.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_fullUrlIs", "name": "Request::fullUrlIs", "doc": "&quot;Determine if the current request URL and query string matches a pattern.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_ajax", "name": "Request::ajax", "doc": "&quot;Determine if the request is the result of an AJAX call.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_pjax", "name": "Request::pjax", "doc": "&quot;Determine if the request is the result of an PJAX call.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_secure", "name": "Request::secure", "doc": "&quot;Determine if the request is over HTTPS.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_ip", "name": "Request::ip", "doc": "&quot;Returns the client IP address.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_ips", "name": "Request::ips", "doc": "&quot;Returns the client IP addresses.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_exists", "name": "Request::exists", "doc": "&quot;Determine if the request contains a given input item key.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_has", "name": "Request::has", "doc": "&quot;Determine if the request contains a non-empty value for an input item.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_all", "name": "Request::all", "doc": "&quot;Get all of the input and files for the request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_input", "name": "Request::input", "doc": "&quot;Retrieve an input item from the request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_only", "name": "Request::only", "doc": "&quot;Get a subset containing the provided keys with values from the input data.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_except", "name": "Request::except", "doc": "&quot;Get all of the input except for a specified array of items.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_intersect", "name": "Request::intersect", "doc": "&quot;Intersect an array of items with the input data.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_query", "name": "Request::query", "doc": "&quot;Retrieve a query string item from the request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_hasCookie", "name": "Request::hasCookie", "doc": "&quot;Determine if a cookie is set on the request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_cookie", "name": "Request::cookie", "doc": "&quot;Retrieve a cookie from the request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_allFiles", "name": "Request::allFiles", "doc": "&quot;Get an array of all of the files on the request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_file", "name": "Request::file", "doc": "&quot;Retrieve a file from the request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_hasFile", "name": "Request::hasFile", "doc": "&quot;Determine if the uploaded data contains a file.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_hasHeader", "name": "Request::hasHeader", "doc": "&quot;Determine if a header is set on the request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_header", "name": "Request::header", "doc": "&quot;Retrieve a header from the request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_server", "name": "Request::server", "doc": "&quot;Retrieve a server variable from the request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_old", "name": "Request::old", "doc": "&quot;Retrieve an old input item.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_flash", "name": "Request::flash", "doc": "&quot;Flash the input for the current request to the session.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_flashOnly", "name": "Request::flashOnly", "doc": "&quot;Flash only some of the input to the session.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_flashExcept", "name": "Request::flashExcept", "doc": "&quot;Flash only some of the input to the session.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_flush", "name": "Request::flush", "doc": "&quot;Flush all of the old input from the session.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_merge", "name": "Request::merge", "doc": "&quot;Merge new input into the current request&#039;s input array.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_replace", "name": "Request::replace", "doc": "&quot;Replace the input for the current request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_json", "name": "Request::json", "doc": "&quot;Get the JSON payload for the request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_matchesType", "name": "Request::matchesType", "doc": "&quot;Determine if the given content types match.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_isJson", "name": "Request::isJson", "doc": "&quot;Determine if the request is sending JSON.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_expectsJson", "name": "Request::expectsJson", "doc": "&quot;Determine if the current request probably expects a JSON response.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_wantsJson", "name": "Request::wantsJson", "doc": "&quot;Determine if the current request is asking for JSON in return.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_accepts", "name": "Request::accepts", "doc": "&quot;Determines whether the current requests accepts a given content type.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_prefers", "name": "Request::prefers", "doc": "&quot;Return the most suitable content type from the given array based on content negotiation.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_acceptsJson", "name": "Request::acceptsJson", "doc": "&quot;Determines whether a request accepts JSON.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_acceptsHtml", "name": "Request::acceptsHtml", "doc": "&quot;Determines whether a request accepts HTML.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_format", "name": "Request::format", "doc": "&quot;Get the data format expected in the response.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_bearerToken", "name": "Request::bearerToken", "doc": "&quot;Get the bearer token from the request headers.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_createFromBase", "name": "Request::createFromBase", "doc": "&quot;Create an Illuminate request from a Symfony instance.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_duplicate", "name": "Request::duplicate", "doc": "&quot;Clones a request and overrides some of its parameters.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_session", "name": "Request::session", "doc": "&quot;Get the session associated with the request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_user", "name": "Request::user", "doc": "&quot;Get the user making the request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_route", "name": "Request::route", "doc": "&quot;Get the route handling the request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_fingerprint", "name": "Request::fingerprint", "doc": "&quot;Get a unique fingerprint for the request \/ route \/ IP address.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getUserResolver", "name": "Request::getUserResolver", "doc": "&quot;Get the user resolver callback.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_setUserResolver", "name": "Request::setUserResolver", "doc": "&quot;Set the user resolver callback.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getRouteResolver", "name": "Request::getRouteResolver", "doc": "&quot;Get the route resolver callback.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_setRouteResolver", "name": "Request::setRouteResolver", "doc": "&quot;Set the route resolver callback.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_toArray", "name": "Request::toArray", "doc": "&quot;Get all of the input and files for the request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_offsetExists", "name": "Request::offsetExists", "doc": "&quot;Determine if the given offset exists.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_offsetGet", "name": "Request::offsetGet", "doc": "&quot;Get the value at the given offset.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_offsetSet", "name": "Request::offsetSet", "doc": "&quot;Set the value at the given offset.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_offsetUnset", "name": "Request::offsetUnset", "doc": "&quot;Remove the value at the given offset.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_initialize", "name": "Request::initialize", "doc": "&quot;Sets the parameters for this request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_createFromGlobals", "name": "Request::createFromGlobals", "doc": "&quot;Creates a new request with values from PHP&#039;s super globals.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_create", "name": "Request::create", "doc": "&quot;Creates a Request based on a given URI and configuration.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_setFactory", "name": "Request::setFactory", "doc": "&quot;Sets a callable able to create a Request instance.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_overrideGlobals", "name": "Request::overrideGlobals", "doc": "&quot;Overrides the PHP global variables according to this request instance.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_setTrustedProxies", "name": "Request::setTrustedProxies", "doc": "&quot;Sets a list of trusted proxies.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getTrustedProxies", "name": "Request::getTrustedProxies", "doc": "&quot;Gets the list of trusted proxies.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_setTrustedHosts", "name": "Request::setTrustedHosts", "doc": "&quot;Sets a list of trusted host patterns.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getTrustedHosts", "name": "Request::getTrustedHosts", "doc": "&quot;Gets the list of trusted host patterns.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_setTrustedHeaderName", "name": "Request::setTrustedHeaderName", "doc": "&quot;Sets the name for trusted headers.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getTrustedHeaderName", "name": "Request::getTrustedHeaderName", "doc": "&quot;Gets the trusted proxy header name.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_normalizeQueryString", "name": "Request::normalizeQueryString", "doc": "&quot;Normalizes a query string.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_enableHttpMethodParameterOverride", "name": "Request::enableHttpMethodParameterOverride", "doc": "&quot;Enables support for the _method request parameter to determine the intended HTTP method.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getHttpMethodParameterOverride", "name": "Request::getHttpMethodParameterOverride", "doc": "&quot;Checks whether support for the _method request parameter is enabled.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_get", "name": "Request::get", "doc": "&quot;Gets a \&quot;parameter\&quot; value from any bag.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getSession", "name": "Request::getSession", "doc": "&quot;Gets the Session.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_hasPreviousSession", "name": "Request::hasPreviousSession", "doc": "&quot;Whether the request contains a Session which was started in one of the\nprevious requests.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_hasSession", "name": "Request::hasSession", "doc": "&quot;Whether the request contains a Session object.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_setSession", "name": "Request::setSession", "doc": "&quot;Sets the Session.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getClientIps", "name": "Request::getClientIps", "doc": "&quot;Returns the client IP addresses.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getClientIp", "name": "Request::getClientIp", "doc": "&quot;Returns the client IP address.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getScriptName", "name": "Request::getScriptName", "doc": "&quot;Returns current script name.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getPathInfo", "name": "Request::getPathInfo", "doc": "&quot;Returns the path being requested relative to the executed script.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getBasePath", "name": "Request::getBasePath", "doc": "&quot;Returns the root path from which this request is executed.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getBaseUrl", "name": "Request::getBaseUrl", "doc": "&quot;Returns the root URL from which this request is executed.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getScheme", "name": "Request::getScheme", "doc": "&quot;Gets the request&#039;s scheme.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getPort", "name": "Request::getPort", "doc": "&quot;Returns the port on which the request is made.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getUser", "name": "Request::getUser", "doc": "&quot;Returns the user.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getPassword", "name": "Request::getPassword", "doc": "&quot;Returns the password.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getUserInfo", "name": "Request::getUserInfo", "doc": "&quot;Gets the user info.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getHttpHost", "name": "Request::getHttpHost", "doc": "&quot;Returns the HTTP host being requested.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getRequestUri", "name": "Request::getRequestUri", "doc": "&quot;Returns the requested URI (path and query string).&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getSchemeAndHttpHost", "name": "Request::getSchemeAndHttpHost", "doc": "&quot;Gets the scheme and HTTP host.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getUri", "name": "Request::getUri", "doc": "&quot;Generates a normalized URI (URL) for the Request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getUriForPath", "name": "Request::getUriForPath", "doc": "&quot;Generates a normalized URI for the given path.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getRelativeUriForPath", "name": "Request::getRelativeUriForPath", "doc": "&quot;Returns the path as relative reference from the current Request path.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getQueryString", "name": "Request::getQueryString", "doc": "&quot;Generates the normalized query string for the Request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_isSecure", "name": "Request::isSecure", "doc": "&quot;Checks whether the request is secure or not.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getHost", "name": "Request::getHost", "doc": "&quot;Returns the host name.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_setMethod", "name": "Request::setMethod", "doc": "&quot;Sets the request method.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getMethod", "name": "Request::getMethod", "doc": "&quot;Gets the request \&quot;intended\&quot; method.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getRealMethod", "name": "Request::getRealMethod", "doc": "&quot;Gets the \&quot;real\&quot; request method.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getMimeType", "name": "Request::getMimeType", "doc": "&quot;Gets the mime type associated with the format.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getMimeTypes", "name": "Request::getMimeTypes", "doc": "&quot;Gets the mime types associated with the format.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getFormat", "name": "Request::getFormat", "doc": "&quot;Gets the format associated with the mime type.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_setFormat", "name": "Request::setFormat", "doc": "&quot;Associates a format with mime types.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getRequestFormat", "name": "Request::getRequestFormat", "doc": "&quot;Gets the request format.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_setRequestFormat", "name": "Request::setRequestFormat", "doc": "&quot;Sets the request format.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getContentType", "name": "Request::getContentType", "doc": "&quot;Gets the format associated with the request.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_setDefaultLocale", "name": "Request::setDefaultLocale", "doc": "&quot;Sets the default locale.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getDefaultLocale", "name": "Request::getDefaultLocale", "doc": "&quot;Get the default locale.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_setLocale", "name": "Request::setLocale", "doc": "&quot;Sets the locale.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getLocale", "name": "Request::getLocale", "doc": "&quot;Get the locale.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_isMethod", "name": "Request::isMethod", "doc": "&quot;Checks if the request method is of specified type.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_isMethodSafe", "name": "Request::isMethodSafe", "doc": "&quot;Checks whether the method is safe or not.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getContent", "name": "Request::getContent", "doc": "&quot;Returns the request body content.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getETags", "name": "Request::getETags", "doc": "&quot;Gets the Etags.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_isNoCache", "name": "Request::isNoCache", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getPreferredLanguage", "name": "Request::getPreferredLanguage", "doc": "&quot;Returns the preferred language.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getLanguages", "name": "Request::getLanguages", "doc": "&quot;Gets a list of languages acceptable by the client browser.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getCharsets", "name": "Request::getCharsets", "doc": "&quot;Gets a list of charsets acceptable by the client browser.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getEncodings", "name": "Request::getEncodings", "doc": "&quot;Gets a list of encodings acceptable by the client browser.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_getAcceptableContentTypes", "name": "Request::getAcceptableContentTypes", "doc": "&quot;Gets a list of content types acceptable by the client browser.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_isXmlHttpRequest", "name": "Request::isXmlHttpRequest", "doc": "&quot;Returns true if the request is a XMLHttpRequest.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_isFromTrustedProxy", "name": "Request::isFromTrustedProxy", "doc": "&quot;Indicates whether this request originated from a trusted proxy.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_macro", "name": "Request::macro", "doc": "&quot;Register a custom macro.&quot;"},
                    {"type": "Method", "fromName": "Request", "fromLink": "Request.html", "link": "Request.html#method_hasMacro", "name": "Request::hasMacro", "doc": "&quot;Checks if macro is registered.&quot;"},
            
            {"type": "Class",  "link": "Response.html", "name": "Response", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Response", "fromLink": "Response.html", "link": "Response.html#method_make", "name": "Response::make", "doc": "&quot;Return a new response from the application.&quot;"},
                    {"type": "Method", "fromName": "Response", "fromLink": "Response.html", "link": "Response.html#method_view", "name": "Response::view", "doc": "&quot;Return a new view response from the application.&quot;"},
                    {"type": "Method", "fromName": "Response", "fromLink": "Response.html", "link": "Response.html#method_json", "name": "Response::json", "doc": "&quot;Return a new JSON response from the application.&quot;"},
                    {"type": "Method", "fromName": "Response", "fromLink": "Response.html", "link": "Response.html#method_jsonp", "name": "Response::jsonp", "doc": "&quot;Return a new JSONP response from the application.&quot;"},
                    {"type": "Method", "fromName": "Response", "fromLink": "Response.html", "link": "Response.html#method_stream", "name": "Response::stream", "doc": "&quot;Return a new streamed response from the application.&quot;"},
                    {"type": "Method", "fromName": "Response", "fromLink": "Response.html", "link": "Response.html#method_download", "name": "Response::download", "doc": "&quot;Create a new file download response.&quot;"},
                    {"type": "Method", "fromName": "Response", "fromLink": "Response.html", "link": "Response.html#method_file", "name": "Response::file", "doc": "&quot;Return the raw contents of a binary file.&quot;"},
                    {"type": "Method", "fromName": "Response", "fromLink": "Response.html", "link": "Response.html#method_redirectTo", "name": "Response::redirectTo", "doc": "&quot;Create a new redirect response to the given path.&quot;"},
                    {"type": "Method", "fromName": "Response", "fromLink": "Response.html", "link": "Response.html#method_redirectToRoute", "name": "Response::redirectToRoute", "doc": "&quot;Create a new redirect response to a named route.&quot;"},
                    {"type": "Method", "fromName": "Response", "fromLink": "Response.html", "link": "Response.html#method_redirectToAction", "name": "Response::redirectToAction", "doc": "&quot;Create a new redirect response to a controller action.&quot;"},
                    {"type": "Method", "fromName": "Response", "fromLink": "Response.html", "link": "Response.html#method_redirectGuest", "name": "Response::redirectGuest", "doc": "&quot;Create a new redirect response, while putting the current URL in the session.&quot;"},
                    {"type": "Method", "fromName": "Response", "fromLink": "Response.html", "link": "Response.html#method_redirectToIntended", "name": "Response::redirectToIntended", "doc": "&quot;Create a new redirect response to the previously intended location.&quot;"},
                    {"type": "Method", "fromName": "Response", "fromLink": "Response.html", "link": "Response.html#method_macro", "name": "Response::macro", "doc": "&quot;Register a custom macro.&quot;"},
                    {"type": "Method", "fromName": "Response", "fromLink": "Response.html", "link": "Response.html#method_hasMacro", "name": "Response::hasMacro", "doc": "&quot;Checks if macro is registered.&quot;"},
            
            {"type": "Class",  "link": "Route.html", "name": "Route", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_get", "name": "Route::get", "doc": "&quot;Register a new GET route with the router.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_post", "name": "Route::post", "doc": "&quot;Register a new POST route with the router.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_put", "name": "Route::put", "doc": "&quot;Register a new PUT route with the router.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_patch", "name": "Route::patch", "doc": "&quot;Register a new PATCH route with the router.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_delete", "name": "Route::delete", "doc": "&quot;Register a new DELETE route with the router.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_options", "name": "Route::options", "doc": "&quot;Register a new OPTIONS route with the router.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_any", "name": "Route::any", "doc": "&quot;Register a new route responding to all verbs.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_match", "name": "Route::match", "doc": "&quot;Register a new route with the given verbs.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_singularResourceParameters", "name": "Route::singularResourceParameters", "doc": "&quot;Set the unmapped global resource parameters to singular.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_resourceParameters", "name": "Route::resourceParameters", "doc": "&quot;Set the global resource parameter mapping.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_resources", "name": "Route::resources", "doc": "&quot;Register an array of resource controllers.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_resource", "name": "Route::resource", "doc": "&quot;Route a resource to a controller.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_auth", "name": "Route::auth", "doc": "&quot;Register the typical authentication routes for an application.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_group", "name": "Route::group", "doc": "&quot;Create a route group with shared attributes.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_mergeWithLastGroup", "name": "Route::mergeWithLastGroup", "doc": "&quot;Merge the given array with the last group stack.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_mergeGroup", "name": "Route::mergeGroup", "doc": "&quot;Merge the given group attributes.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_getLastGroupPrefix", "name": "Route::getLastGroupPrefix", "doc": "&quot;Get the prefix from the last group on the stack.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_dispatch", "name": "Route::dispatch", "doc": "&quot;Dispatch the request to the application.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_dispatchToRoute", "name": "Route::dispatchToRoute", "doc": "&quot;Dispatch the request to a route and return the response.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_gatherRouteMiddleware", "name": "Route::gatherRouteMiddleware", "doc": "&quot;Gather the middleware for the given route.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_resolveMiddlewareClassName", "name": "Route::resolveMiddlewareClassName", "doc": "&quot;Resolve the middleware name to a class name(s) preserving passed parameters.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_substituteBindings", "name": "Route::substituteBindings", "doc": "&quot;Substitute the route bindings onto the route.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_substituteImplicitBindings", "name": "Route::substituteImplicitBindings", "doc": "&quot;Substitute the implicit Eloquent model bindings for the route.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_matched", "name": "Route::matched", "doc": "&quot;Register a route matched event listener.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_getMiddleware", "name": "Route::getMiddleware", "doc": "&quot;Get all of the defined middleware short-hand names.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_middleware", "name": "Route::middleware", "doc": "&quot;Register a short-hand name for a middleware.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_middlewareGroup", "name": "Route::middlewareGroup", "doc": "&quot;Register a group of middleware.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_prependMiddlewareToGroup", "name": "Route::prependMiddlewareToGroup", "doc": "&quot;Add a middleware to the beginning of a middleware group.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_pushMiddlewareToGroup", "name": "Route::pushMiddlewareToGroup", "doc": "&quot;Add a middleware to the end of a middleware group.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_model", "name": "Route::model", "doc": "&quot;Register a model binder for a wildcard.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_bind", "name": "Route::bind", "doc": "&quot;Add a new route parameter binder.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_createClassBinding", "name": "Route::createClassBinding", "doc": "&quot;Create a class based binding using the IoC container.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_pattern", "name": "Route::pattern", "doc": "&quot;Set a global where pattern on all routes.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_patterns", "name": "Route::patterns", "doc": "&quot;Set a group of global where patterns on all routes.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_prepareResponse", "name": "Route::prepareResponse", "doc": "&quot;Create a response instance from the given value.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_hasGroupStack", "name": "Route::hasGroupStack", "doc": "&quot;Determine if the router currently has a group stack.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_getGroupStack", "name": "Route::getGroupStack", "doc": "&quot;Get the current group stack for the router.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_input", "name": "Route::input", "doc": "&quot;Get a route parameter for the current route.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_getCurrentRoute", "name": "Route::getCurrentRoute", "doc": "&quot;Get the currently dispatched route instance.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_current", "name": "Route::current", "doc": "&quot;Get the currently dispatched route instance.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_has", "name": "Route::has", "doc": "&quot;Check if a route with the given name exists.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_currentRouteName", "name": "Route::currentRouteName", "doc": "&quot;Get the current route name.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_is", "name": "Route::is", "doc": "&quot;Alias for the \&quot;currentRouteNamed\&quot; method.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_currentRouteNamed", "name": "Route::currentRouteNamed", "doc": "&quot;Determine if the current route matches a given name.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_currentRouteAction", "name": "Route::currentRouteAction", "doc": "&quot;Get the current route action.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_uses", "name": "Route::uses", "doc": "&quot;Alias for the \&quot;currentRouteUses\&quot; method.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_currentRouteUses", "name": "Route::currentRouteUses", "doc": "&quot;Determine if the current route action matches a given action.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_getCurrentRequest", "name": "Route::getCurrentRequest", "doc": "&quot;Get the request currently being dispatched.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_getRoutes", "name": "Route::getRoutes", "doc": "&quot;Get the underlying route collection.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_setRoutes", "name": "Route::setRoutes", "doc": "&quot;Set the route collection instance.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_getPatterns", "name": "Route::getPatterns", "doc": "&quot;Get the global \&quot;where\&quot; patterns.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_macro", "name": "Route::macro", "doc": "&quot;Register a custom macro.&quot;"},
                    {"type": "Method", "fromName": "Route", "fromLink": "Route.html", "link": "Route.html#method_hasMacro", "name": "Route::hasMacro", "doc": "&quot;Checks if macro is registered.&quot;"},
            
            {"type": "Class",  "link": "Schema.html", "name": "Schema", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Schema", "fromLink": "Schema.html", "link": "Schema.html#method_hasTable", "name": "Schema::hasTable", "doc": "&quot;Determine if the given table exists.&quot;"},
                    {"type": "Method", "fromName": "Schema", "fromLink": "Schema.html", "link": "Schema.html#method_hasColumn", "name": "Schema::hasColumn", "doc": "&quot;Determine if the given table has a given column.&quot;"},
                    {"type": "Method", "fromName": "Schema", "fromLink": "Schema.html", "link": "Schema.html#method_hasColumns", "name": "Schema::hasColumns", "doc": "&quot;Determine if the given table has given columns.&quot;"},
                    {"type": "Method", "fromName": "Schema", "fromLink": "Schema.html", "link": "Schema.html#method_getColumnType", "name": "Schema::getColumnType", "doc": "&quot;Get the data type for the given column name.&quot;"},
                    {"type": "Method", "fromName": "Schema", "fromLink": "Schema.html", "link": "Schema.html#method_getColumnListing", "name": "Schema::getColumnListing", "doc": "&quot;Get the column listing for a given table.&quot;"},
                    {"type": "Method", "fromName": "Schema", "fromLink": "Schema.html", "link": "Schema.html#method_table", "name": "Schema::table", "doc": "&quot;Modify a table on the schema.&quot;"},
                    {"type": "Method", "fromName": "Schema", "fromLink": "Schema.html", "link": "Schema.html#method_create", "name": "Schema::create", "doc": "&quot;Create a new table on the schema.&quot;"},
                    {"type": "Method", "fromName": "Schema", "fromLink": "Schema.html", "link": "Schema.html#method_drop", "name": "Schema::drop", "doc": "&quot;Drop a table from the schema.&quot;"},
                    {"type": "Method", "fromName": "Schema", "fromLink": "Schema.html", "link": "Schema.html#method_dropIfExists", "name": "Schema::dropIfExists", "doc": "&quot;Drop a table from the schema if it exists.&quot;"},
                    {"type": "Method", "fromName": "Schema", "fromLink": "Schema.html", "link": "Schema.html#method_rename", "name": "Schema::rename", "doc": "&quot;Rename a table on the schema.&quot;"},
                    {"type": "Method", "fromName": "Schema", "fromLink": "Schema.html", "link": "Schema.html#method_enableForeignKeyConstraints", "name": "Schema::enableForeignKeyConstraints", "doc": "&quot;Enable foreign key constraints.&quot;"},
                    {"type": "Method", "fromName": "Schema", "fromLink": "Schema.html", "link": "Schema.html#method_disableForeignKeyConstraints", "name": "Schema::disableForeignKeyConstraints", "doc": "&quot;Disable foreign key constraints.&quot;"},
                    {"type": "Method", "fromName": "Schema", "fromLink": "Schema.html", "link": "Schema.html#method_getConnection", "name": "Schema::getConnection", "doc": "&quot;Get the database connection instance.&quot;"},
                    {"type": "Method", "fromName": "Schema", "fromLink": "Schema.html", "link": "Schema.html#method_setConnection", "name": "Schema::setConnection", "doc": "&quot;Set the database connection instance.&quot;"},
                    {"type": "Method", "fromName": "Schema", "fromLink": "Schema.html", "link": "Schema.html#method_blueprintResolver", "name": "Schema::blueprintResolver", "doc": "&quot;Set the Schema Blueprint resolver callback.&quot;"},
            
            {"type": "Class",  "link": "Session.html", "name": "Session", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_getSessionConfig", "name": "Session::getSessionConfig", "doc": "&quot;Get the session configuration.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_getDefaultDriver", "name": "Session::getDefaultDriver", "doc": "&quot;Get the default session driver name.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_setDefaultDriver", "name": "Session::setDefaultDriver", "doc": "&quot;Set the default session driver name.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_driver", "name": "Session::driver", "doc": "&quot;Get a driver instance.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_extend", "name": "Session::extend", "doc": "&quot;Register a custom driver creator Closure.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_getDrivers", "name": "Session::getDrivers", "doc": "&quot;Get all of the created \&quot;drivers\&quot;.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_start", "name": "Session::start", "doc": "&quot;Starts the session storage.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_getId", "name": "Session::getId", "doc": "&quot;Returns the session ID.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_setId", "name": "Session::setId", "doc": "&quot;Sets the session ID.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_isValidId", "name": "Session::isValidId", "doc": "&quot;Determine if this is a valid session ID.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_getName", "name": "Session::getName", "doc": "&quot;Returns the session name.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_setName", "name": "Session::setName", "doc": "&quot;Sets the session name.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_invalidate", "name": "Session::invalidate", "doc": "&quot;Invalidates the current session.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_migrate", "name": "Session::migrate", "doc": "&quot;Migrates the current session to a new session id while maintaining all\nsession attributes.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_regenerate", "name": "Session::regenerate", "doc": "&quot;Generate a new session identifier.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_save", "name": "Session::save", "doc": "&quot;Force the session to be saved and closed.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_ageFlashData", "name": "Session::ageFlashData", "doc": "&quot;Age the flash data for the session.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_exists", "name": "Session::exists", "doc": "&quot;Checks if an attribute exists.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_has", "name": "Session::has", "doc": "&quot;Checks if an attribute is defined.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_get", "name": "Session::get", "doc": "&quot;Returns an attribute.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_pull", "name": "Session::pull", "doc": "&quot;Get the value of a given key and then forget it.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_hasOldInput", "name": "Session::hasOldInput", "doc": "&quot;Determine if the session contains old input.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_getOldInput", "name": "Session::getOldInput", "doc": "&quot;Get the requested item from the flashed input array.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_set", "name": "Session::set", "doc": "&quot;Sets an attribute.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_put", "name": "Session::put", "doc": "&quot;Put a key \/ value pair or array of key \/ value pairs in the session.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_push", "name": "Session::push", "doc": "&quot;Push a value onto a session array.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_increment", "name": "Session::increment", "doc": "&quot;Increment the value of an item in the session.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_decrement", "name": "Session::decrement", "doc": "&quot;Decrement the value of an item in the session.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_flash", "name": "Session::flash", "doc": "&quot;Flash a key \/ value pair to the session.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_now", "name": "Session::now", "doc": "&quot;Flash a key \/ value pair to the session\nfor immediate use.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_flashInput", "name": "Session::flashInput", "doc": "&quot;Flash an input array to the session.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_reflash", "name": "Session::reflash", "doc": "&quot;Reflash all of the session flash data.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_keep", "name": "Session::keep", "doc": "&quot;Reflash a subset of the current flash data.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_all", "name": "Session::all", "doc": "&quot;Returns attributes.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_replace", "name": "Session::replace", "doc": "&quot;Sets attributes.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_remove", "name": "Session::remove", "doc": "&quot;Removes an attribute.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_forget", "name": "Session::forget", "doc": "&quot;Remove one or many items from the session.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_clear", "name": "Session::clear", "doc": "&quot;Clears all attributes.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_flush", "name": "Session::flush", "doc": "&quot;Remove all of the items from the session.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_isStarted", "name": "Session::isStarted", "doc": "&quot;Checks if the session was started.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_registerBag", "name": "Session::registerBag", "doc": "&quot;Registers a SessionBagInterface with the session.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_getBag", "name": "Session::getBag", "doc": "&quot;Gets a bag instance by name.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_getMetadataBag", "name": "Session::getMetadataBag", "doc": "&quot;Gets session meta.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_getBagData", "name": "Session::getBagData", "doc": "&quot;Get the raw bag data array for a given bag.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_token", "name": "Session::token", "doc": "&quot;Get the CSRF token value.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_getToken", "name": "Session::getToken", "doc": "&quot;Get the CSRF token value.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_regenerateToken", "name": "Session::regenerateToken", "doc": "&quot;Regenerate the CSRF token value.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_previousUrl", "name": "Session::previousUrl", "doc": "&quot;Get the previous URL from the session.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_setPreviousUrl", "name": "Session::setPreviousUrl", "doc": "&quot;Set the \&quot;previous\&quot; URL in the session.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_setExists", "name": "Session::setExists", "doc": "&quot;Set the existence of the session on the handler if applicable.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_getHandler", "name": "Session::getHandler", "doc": "&quot;Get the underlying session handler implementation.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_handlerNeedsRequest", "name": "Session::handlerNeedsRequest", "doc": "&quot;Determine if the session handler needs a request.&quot;"},
                    {"type": "Method", "fromName": "Session", "fromLink": "Session.html", "link": "Session.html#method_setRequestOnHandler", "name": "Session::setRequestOnHandler", "doc": "&quot;Set the request on the handler instance.&quot;"},
            
            {"type": "Class",  "link": "Storage.html", "name": "Storage", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_drive", "name": "Storage::drive", "doc": "&quot;Get a filesystem instance.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_disk", "name": "Storage::disk", "doc": "&quot;Get a filesystem instance.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_cloud", "name": "Storage::cloud", "doc": "&quot;Get a default cloud filesystem instance.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_createLocalDriver", "name": "Storage::createLocalDriver", "doc": "&quot;Create an instance of the local driver.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_createFtpDriver", "name": "Storage::createFtpDriver", "doc": "&quot;Create an instance of the ftp driver.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_createS3Driver", "name": "Storage::createS3Driver", "doc": "&quot;Create an instance of the Amazon S3 driver.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_createRackspaceDriver", "name": "Storage::createRackspaceDriver", "doc": "&quot;Create an instance of the Rackspace driver.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_getDefaultDriver", "name": "Storage::getDefaultDriver", "doc": "&quot;Get the default driver name.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_getDefaultCloudDriver", "name": "Storage::getDefaultCloudDriver", "doc": "&quot;Get the default cloud driver name.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_extend", "name": "Storage::extend", "doc": "&quot;Register a custom driver creator Closure.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_exists", "name": "Storage::exists", "doc": "&quot;Determine if a file exists.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_get", "name": "Storage::get", "doc": "&quot;Get the contents of a file.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_put", "name": "Storage::put", "doc": "&quot;Write the contents of a file.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_putFile", "name": "Storage::putFile", "doc": "&quot;Store the uploaded file on the disk.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_putFileAs", "name": "Storage::putFileAs", "doc": "&quot;Store the uploaded file on the disk with a given name.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_getVisibility", "name": "Storage::getVisibility", "doc": "&quot;Get the visibility for the given path.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_setVisibility", "name": "Storage::setVisibility", "doc": "&quot;Set the visibility for the given path.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_prepend", "name": "Storage::prepend", "doc": "&quot;Prepend to a file.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_append", "name": "Storage::append", "doc": "&quot;Append to a file.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_delete", "name": "Storage::delete", "doc": "&quot;Delete the file at a given path.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_copy", "name": "Storage::copy", "doc": "&quot;Copy a file to a new location.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_move", "name": "Storage::move", "doc": "&quot;Move a file to a new location.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_size", "name": "Storage::size", "doc": "&quot;Get the file size of a given file.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_mimeType", "name": "Storage::mimeType", "doc": "&quot;Get the mime-type of a given file.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_lastModified", "name": "Storage::lastModified", "doc": "&quot;Get the file&#039;s last modification time.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_url", "name": "Storage::url", "doc": "&quot;Get the URL for the file at the given path.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_files", "name": "Storage::files", "doc": "&quot;Get an array of all files in a directory.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_allFiles", "name": "Storage::allFiles", "doc": "&quot;Get all of the files from the given directory (recursive).&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_directories", "name": "Storage::directories", "doc": "&quot;Get all of the directories within a given directory.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_allDirectories", "name": "Storage::allDirectories", "doc": "&quot;Get all (recursive) of the directories within a given directory.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_makeDirectory", "name": "Storage::makeDirectory", "doc": "&quot;Create a directory.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_deleteDirectory", "name": "Storage::deleteDirectory", "doc": "&quot;Recursively delete a directory.&quot;"},
                    {"type": "Method", "fromName": "Storage", "fromLink": "Storage.html", "link": "Storage.html#method_getDriver", "name": "Storage::getDriver", "doc": "&quot;Get the Flysystem driver.&quot;"},
            
            {"type": "Class",  "link": "TasksTablesSeeder.html", "name": "TasksTablesSeeder", "doc": "&quot;Class TasksTablesSeeder&quot;"},
                                                        {"type": "Method", "fromName": "TasksTablesSeeder", "fromLink": "TasksTablesSeeder.html", "link": "TasksTablesSeeder.html#method_run", "name": "TasksTablesSeeder::run", "doc": "&quot;Run the database seeds.&quot;"},
            
            {"type": "Class",  "link": "URL.html", "name": "URL", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "URL", "fromLink": "URL.html", "link": "URL.html#method_full", "name": "URL::full", "doc": "&quot;Get the full URL for the current request.&quot;"},
                    {"type": "Method", "fromName": "URL", "fromLink": "URL.html", "link": "URL.html#method_current", "name": "URL::current", "doc": "&quot;Get the current URL for the request.&quot;"},
                    {"type": "Method", "fromName": "URL", "fromLink": "URL.html", "link": "URL.html#method_previous", "name": "URL::previous", "doc": "&quot;Get the URL for the previous request.&quot;"},
                    {"type": "Method", "fromName": "URL", "fromLink": "URL.html", "link": "URL.html#method_to", "name": "URL::to", "doc": "&quot;Generate an absolute URL to the given path.&quot;"},
                    {"type": "Method", "fromName": "URL", "fromLink": "URL.html", "link": "URL.html#method_secure", "name": "URL::secure", "doc": "&quot;Generate a secure, absolute URL to the given path.&quot;"},
                    {"type": "Method", "fromName": "URL", "fromLink": "URL.html", "link": "URL.html#method_asset", "name": "URL::asset", "doc": "&quot;Generate the URL to an application asset.&quot;"},
                    {"type": "Method", "fromName": "URL", "fromLink": "URL.html", "link": "URL.html#method_assetFrom", "name": "URL::assetFrom", "doc": "&quot;Generate the URL to an asset from a custom root domain such as CDN, etc.&quot;"},
                    {"type": "Method", "fromName": "URL", "fromLink": "URL.html", "link": "URL.html#method_secureAsset", "name": "URL::secureAsset", "doc": "&quot;Generate the URL to a secure asset.&quot;"},
                    {"type": "Method", "fromName": "URL", "fromLink": "URL.html", "link": "URL.html#method_forceSchema", "name": "URL::forceSchema", "doc": "&quot;Force the schema for URLs.&quot;"},
                    {"type": "Method", "fromName": "URL", "fromLink": "URL.html", "link": "URL.html#method_route", "name": "URL::route", "doc": "&quot;Get the URL to a named route.&quot;"},
                    {"type": "Method", "fromName": "URL", "fromLink": "URL.html", "link": "URL.html#method_action", "name": "URL::action", "doc": "&quot;Get the URL to a controller action.&quot;"},
                    {"type": "Method", "fromName": "URL", "fromLink": "URL.html", "link": "URL.html#method_forceRootUrl", "name": "URL::forceRootUrl", "doc": "&quot;Set the forced root URL.&quot;"},
                    {"type": "Method", "fromName": "URL", "fromLink": "URL.html", "link": "URL.html#method_isValidUrl", "name": "URL::isValidUrl", "doc": "&quot;Determine if the given path is a valid URL.&quot;"},
                    {"type": "Method", "fromName": "URL", "fromLink": "URL.html", "link": "URL.html#method_getRequest", "name": "URL::getRequest", "doc": "&quot;Get the request instance.&quot;"},
                    {"type": "Method", "fromName": "URL", "fromLink": "URL.html", "link": "URL.html#method_setRequest", "name": "URL::setRequest", "doc": "&quot;Set the current request instance.&quot;"},
                    {"type": "Method", "fromName": "URL", "fromLink": "URL.html", "link": "URL.html#method_setRoutes", "name": "URL::setRoutes", "doc": "&quot;Set the route collection.&quot;"},
                    {"type": "Method", "fromName": "URL", "fromLink": "URL.html", "link": "URL.html#method_setSessionResolver", "name": "URL::setSessionResolver", "doc": "&quot;Set the session resolver for the generator.&quot;"},
                    {"type": "Method", "fromName": "URL", "fromLink": "URL.html", "link": "URL.html#method_setRootControllerNamespace", "name": "URL::setRootControllerNamespace", "doc": "&quot;Set the root controller namespace.&quot;"},
                    {"type": "Method", "fromName": "URL", "fromLink": "URL.html", "link": "URL.html#method_macro", "name": "URL::macro", "doc": "&quot;Register a custom macro.&quot;"},
                    {"type": "Method", "fromName": "URL", "fromLink": "URL.html", "link": "URL.html#method_hasMacro", "name": "URL::hasMacro", "doc": "&quot;Checks if macro is registered.&quot;"},
            
            {"type": "Class",  "link": "UsersTablesSeeder.html", "name": "UsersTablesSeeder", "doc": "&quot;Class UsersTablesSeeder&quot;"},
                                                        {"type": "Method", "fromName": "UsersTablesSeeder", "fromLink": "UsersTablesSeeder.html", "link": "UsersTablesSeeder.html#method_run", "name": "UsersTablesSeeder::run", "doc": "&quot;Run the database seeds.&quot;"},
            
            {"type": "Class",  "link": "Validator.html", "name": "Validator", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Validator", "fromLink": "Validator.html", "link": "Validator.html#method_make", "name": "Validator::make", "doc": "&quot;Create a new Validator instance.&quot;"},
                    {"type": "Method", "fromName": "Validator", "fromLink": "Validator.html", "link": "Validator.html#method_validate", "name": "Validator::validate", "doc": "&quot;Validate the given data against the provided rules.&quot;"},
                    {"type": "Method", "fromName": "Validator", "fromLink": "Validator.html", "link": "Validator.html#method_extend", "name": "Validator::extend", "doc": "&quot;Register a custom validator extension.&quot;"},
                    {"type": "Method", "fromName": "Validator", "fromLink": "Validator.html", "link": "Validator.html#method_extendImplicit", "name": "Validator::extendImplicit", "doc": "&quot;Register a custom implicit validator extension.&quot;"},
                    {"type": "Method", "fromName": "Validator", "fromLink": "Validator.html", "link": "Validator.html#method_replacer", "name": "Validator::replacer", "doc": "&quot;Register a custom implicit validator message replacer.&quot;"},
                    {"type": "Method", "fromName": "Validator", "fromLink": "Validator.html", "link": "Validator.html#method_resolver", "name": "Validator::resolver", "doc": "&quot;Set the Validator instance resolver.&quot;"},
                    {"type": "Method", "fromName": "Validator", "fromLink": "Validator.html", "link": "Validator.html#method_getTranslator", "name": "Validator::getTranslator", "doc": "&quot;Get the Translator implementation.&quot;"},
                    {"type": "Method", "fromName": "Validator", "fromLink": "Validator.html", "link": "Validator.html#method_getPresenceVerifier", "name": "Validator::getPresenceVerifier", "doc": "&quot;Get the Presence Verifier implementation.&quot;"},
                    {"type": "Method", "fromName": "Validator", "fromLink": "Validator.html", "link": "Validator.html#method_setPresenceVerifier", "name": "Validator::setPresenceVerifier", "doc": "&quot;Set the Presence Verifier implementation.&quot;"},
            
            {"type": "Class",  "link": "View.html", "name": "View", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_file", "name": "View::file", "doc": "&quot;Get the evaluated view contents for the given view.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_make", "name": "View::make", "doc": "&quot;Get the evaluated view contents for the given view.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_of", "name": "View::of", "doc": "&quot;Get the evaluated view contents for a named view.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_name", "name": "View::name", "doc": "&quot;Register a named view.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_alias", "name": "View::alias", "doc": "&quot;Add an alias for a view.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_exists", "name": "View::exists", "doc": "&quot;Determine if a given view exists.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_renderEach", "name": "View::renderEach", "doc": "&quot;Get the rendered contents of a partial from a loop.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_getEngineFromPath", "name": "View::getEngineFromPath", "doc": "&quot;Get the appropriate view engine for the given path.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_share", "name": "View::share", "doc": "&quot;Add a piece of shared data to the environment.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_creator", "name": "View::creator", "doc": "&quot;Register a view creator event.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_composers", "name": "View::composers", "doc": "&quot;Register multiple view composers via an array.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_composer", "name": "View::composer", "doc": "&quot;Register a view composer event.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_callComposer", "name": "View::callComposer", "doc": "&quot;Call the composer for a given view.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_callCreator", "name": "View::callCreator", "doc": "&quot;Call the creator for a given view.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_startSection", "name": "View::startSection", "doc": "&quot;Start injecting content into a section.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_inject", "name": "View::inject", "doc": "&quot;Inject inline content into a section.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_yieldSection", "name": "View::yieldSection", "doc": "&quot;Stop injecting content into a section and return its contents.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_stopSection", "name": "View::stopSection", "doc": "&quot;Stop injecting content into a section.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_appendSection", "name": "View::appendSection", "doc": "&quot;Stop injecting content into a section and append it.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_yieldContent", "name": "View::yieldContent", "doc": "&quot;Get the string contents of a section.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_startPush", "name": "View::startPush", "doc": "&quot;Start injecting content into a push section.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_stopPush", "name": "View::stopPush", "doc": "&quot;Stop injecting content into a push section.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_yieldPushContent", "name": "View::yieldPushContent", "doc": "&quot;Get the string contents of a push section.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_flushSections", "name": "View::flushSections", "doc": "&quot;Flush all of the section contents.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_flushSectionsIfDoneRendering", "name": "View::flushSectionsIfDoneRendering", "doc": "&quot;Flush all of the section contents if done rendering.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_incrementRender", "name": "View::incrementRender", "doc": "&quot;Increment the rendering counter.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_decrementRender", "name": "View::decrementRender", "doc": "&quot;Decrement the rendering counter.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_doneRendering", "name": "View::doneRendering", "doc": "&quot;Check if there are no active render operations.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_addLoop", "name": "View::addLoop", "doc": "&quot;Add new loop to the stack.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_incrementLoopIndices", "name": "View::incrementLoopIndices", "doc": "&quot;Increment the top loop&#039;s indices.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_popLoop", "name": "View::popLoop", "doc": "&quot;Pop a loop from the top of the loop stack.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_getFirstLoop", "name": "View::getFirstLoop", "doc": "&quot;Get an instance of the first loop in the stack.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_getLoopStack", "name": "View::getLoopStack", "doc": "&quot;Get the entire loop stack.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_addLocation", "name": "View::addLocation", "doc": "&quot;Add a location to the array of view locations.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_addNamespace", "name": "View::addNamespace", "doc": "&quot;Add a new namespace to the loader.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_prependNamespace", "name": "View::prependNamespace", "doc": "&quot;Prepend a new namespace to the loader.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_addExtension", "name": "View::addExtension", "doc": "&quot;Register a valid view extension and its engine.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_getExtensions", "name": "View::getExtensions", "doc": "&quot;Get the extension to engine bindings.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_getEngineResolver", "name": "View::getEngineResolver", "doc": "&quot;Get the engine resolver instance.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_getFinder", "name": "View::getFinder", "doc": "&quot;Get the view finder instance.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_setFinder", "name": "View::setFinder", "doc": "&quot;Set the view finder instance.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_getDispatcher", "name": "View::getDispatcher", "doc": "&quot;Get the event dispatcher instance.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_setDispatcher", "name": "View::setDispatcher", "doc": "&quot;Set the event dispatcher instance.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_getContainer", "name": "View::getContainer", "doc": "&quot;Get the IoC container instance.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_setContainer", "name": "View::setContainer", "doc": "&quot;Set the IoC container instance.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_shared", "name": "View::shared", "doc": "&quot;Get an item from the shared data.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_getShared", "name": "View::getShared", "doc": "&quot;Get all of the shared data for the environment.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_hasSection", "name": "View::hasSection", "doc": "&quot;Check if section exists.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_getSections", "name": "View::getSections", "doc": "&quot;Get the entire array of sections.&quot;"},
                    {"type": "Method", "fromName": "View", "fromLink": "View.html", "link": "View.html#method_getNames", "name": "View::getNames", "doc": "&quot;Get all of the registered named views in environment.&quot;"},
            
            
                                        // Fix trailing commas in the index
        {}
    ];

    /** Tokenizes strings by namespaces and functions */
    function tokenizer(term) {
        if (!term) {
            return [];
        }

        var tokens = [term];
        var meth = term.indexOf('::');

        // Split tokens into methods if "::" is found.
        if (meth > -1) {
            tokens.push(term.substr(meth + 2));
            term = term.substr(0, meth - 2);
        }

        // Split by namespace or fake namespace.
        if (term.indexOf('\\') > -1) {
            tokens = tokens.concat(term.split('\\'));
        } else if (term.indexOf('_') > 0) {
            tokens = tokens.concat(term.split('_'));
        }

        // Merge in splitting the string by case and return
        tokens = tokens.concat(term.match(/(([A-Z]?[^A-Z]*)|([a-z]?[^a-z]*))/g).slice(0,-1));

        return tokens;
    };

    root.Sami = {
        /**
         * Cleans the provided term. If no term is provided, then one is
         * grabbed from the query string "search" parameter.
         */
        cleanSearchTerm: function(term) {
            // Grab from the query string
            if (typeof term === 'undefined') {
                var name = 'search';
                var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
                var results = regex.exec(location.search);
                if (results === null) {
                    return null;
                }
                term = decodeURIComponent(results[1].replace(/\+/g, " "));
            }

            return term.replace(/<(?:.|\n)*?>/gm, '');
        },

        /** Searches through the index for a given term */
        search: function(term) {
            // Create a new search index if needed
            if (!bhIndex) {
                bhIndex = new Bloodhound({
                    limit: 500,
                    local: searchIndex,
                    datumTokenizer: function (d) {
                        return tokenizer(d.name);
                    },
                    queryTokenizer: Bloodhound.tokenizers.whitespace
                });
                bhIndex.initialize();
            }

            results = [];
            bhIndex.get(term, function(matches) {
                results = matches;
            });

            if (!rootPath) {
                return results;
            }

            // Fix the element links based on the current page depth.
            return $.map(results, function(ele) {
                if (ele.link.indexOf('..') > -1) {
                    return ele;
                }
                ele.link = rootPath + ele.link;
                if (ele.fromLink) {
                    ele.fromLink = rootPath + ele.fromLink;
                }
                return ele;
            });
        },

        /** Get a search class for a specific type */
        getSearchClass: function(type) {
            return searchTypeClasses[type] || searchTypeClasses['_'];
        },

        /** Add the left-nav tree to the site */
        injectApiTree: function(ele) {
            ele.html(treeHtml);
        }
    };

    $(function() {
        // Modify the HTML to work correctly based on the current depth
        rootPath = $('body').attr('data-root-path');
        treeHtml = treeHtml.replace(/href="/g, 'href="' + rootPath);
        Sami.injectApiTree($('#api-tree'));
    });

    return root.Sami;
})(window);

$(function() {

    // Enable the version switcher
    $('#version-switcher').change(function() {
        window.location = $(this).val()
    });

    
        // Toggle left-nav divs on click
        $('#api-tree .hd span').click(function() {
            $(this).parent().parent().toggleClass('opened');
        });

        // Expand the parent namespaces of the current page.
        var expected = $('body').attr('data-name');

        if (expected) {
            // Open the currently selected node and its parents.
            var container = $('#api-tree');
            var node = $('#api-tree li[data-name="' + expected + '"]');
            // Node might not be found when simulating namespaces
            if (node.length > 0) {
                node.addClass('active').addClass('opened');
                node.parents('li').addClass('opened');
                var scrollPos = node.offset().top - container.offset().top + container.scrollTop();
                // Position the item nearer to the top of the screen.
                scrollPos -= 200;
                container.scrollTop(scrollPos);
            }
        }

    
    
        var form = $('#search-form .typeahead');
        form.typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        }, {
            name: 'search',
            displayKey: 'name',
            source: function (q, cb) {
                cb(Sami.search(q));
            }
        });

        // The selection is direct-linked when the user selects a suggestion.
        form.on('typeahead:selected', function(e, suggestion) {
            window.location = suggestion.link;
        });

        // The form is submitted when the user hits enter.
        form.keypress(function (e) {
            if (e.which == 13) {
                $('#search-form').submit();
                return true;
            }
        });

    
});


